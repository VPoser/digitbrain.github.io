{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"DIGITbrain Project Documentation For full project details visit digitbrain.eu . About this documentation These docs aim to serve as a point of reference for providers of assets to DIGITbrain. The navigation bar along the top will serve as your guide.","title":"Home"},{"location":"#digitbrain-project-documentation","text":"For full project details visit digitbrain.eu .","title":"DIGITbrain Project Documentation"},{"location":"#about-this-documentation","text":"These docs aim to serve as a point of reference for providers of assets to DIGITbrain. The navigation bar along the top will serve as your guide.","title":"About this documentation"},{"location":"algorithm/","text":"Algorithms in DIGITbrain Introduction Here is an introduction to Algorithms in Db. Pre-requisites Information on any requirements imposed on this asset. Metadata describing Algorithms For a closer look at this metadata, use the following resources: Attribute Listing for an itemised listing of fields Metadata Table for a table-formatted overview Feel free to extend this list as desired Further reading... This space is for any other required documentation on this asset.","title":"Algorithm"},{"location":"algorithm/#algorithms-in-digitbrain","text":"","title":"Algorithms in DIGITbrain"},{"location":"algorithm/#introduction","text":"Here is an introduction to Algorithms in Db.","title":"Introduction"},{"location":"algorithm/#pre-requisites","text":"Information on any requirements imposed on this asset.","title":"Pre-requisites"},{"location":"algorithm/#metadata-describing-algorithms","text":"For a closer look at this metadata, use the following resources: Attribute Listing for an itemised listing of fields Metadata Table for a table-formatted overview Feel free to extend this list as desired","title":"Metadata describing Algorithms"},{"location":"algorithm/#further-reading","text":"This space is for any other required documentation on this asset.","title":"Further reading..."},{"location":"data/","text":"Data in DIGITbrain Introduction Data sources are individual entities or assets in DIGITbrain that serve data for computations made by Algorithms whose results are persisted in the same or another Data resource called a Data sink . When composing DMA Tuples , the DMA Composer chooses one or more Data resources, specifying exactly where the Algorithm should consume the data from and where to store its outputs. Such decoupling makes possible that the same Data resource can potentially be processed by different Algorithms (different analytics on same IPI data) or the same Algorithm can be applied on a different Data resource (same analytics but on different IPI data). Note that Model that is though another parameter of DMA tuples are not considered as \"Data resource\" in this context. Data resources can either provide data ( source ), store data ( sink ) or enable both ( bidirectional ), each is of a kind : file store, database , or a stream of data - regardless of the particular implementations: Amazonon S3, Oracle MySQL, Mosquitto MQTT Broker, Apache Kafka, etc., and the corresponding type : s3, mysql, mqtt, kafka, etc. From location point of view, Data resources can be: on premise (or hosted in some private/public cloud external to compute cloud of Algorithm) cloud-hosted (hosted in the same compute cloud but managed independently of the Algorithm) To enable particular access to data for Algorithms each Data resource has an URI (Uniform Resource Identifier) associated of the form: protocol://host:port/path which specifies the protocol, host and port information, and additional details in the path part (database name, path of the file, topic name) for connection. For example, URI s3://aws.amazon.com/mybucket/myfile.dat specifies a Data resource providing a single file 'myfile.dat' available over S3 protocol at host aws.amazon.com in bucket 'mybucket'. Pre-requisites On-premises Data resources must be accessible for Algorithms running in a cloud, thus they must: be accessible over the public internet have public IP address or domain name corresponding ports open for the domain towards the compute cloud of the Algorithms Metadata describing Data For a closer look at this metadata, use the following resources: Attribute Listing for an itemised listing of fields Metadata Table for a table-formatted overview Feel free to extend this list as desired Further reading... This space is for any other required documentation on this asset.","title":"Data"},{"location":"data/#data-in-digitbrain","text":"","title":"Data in DIGITbrain"},{"location":"data/#introduction","text":"Data sources are individual entities or assets in DIGITbrain that serve data for computations made by Algorithms whose results are persisted in the same or another Data resource called a Data sink . When composing DMA Tuples , the DMA Composer chooses one or more Data resources, specifying exactly where the Algorithm should consume the data from and where to store its outputs. Such decoupling makes possible that the same Data resource can potentially be processed by different Algorithms (different analytics on same IPI data) or the same Algorithm can be applied on a different Data resource (same analytics but on different IPI data). Note that Model that is though another parameter of DMA tuples are not considered as \"Data resource\" in this context. Data resources can either provide data ( source ), store data ( sink ) or enable both ( bidirectional ), each is of a kind : file store, database , or a stream of data - regardless of the particular implementations: Amazonon S3, Oracle MySQL, Mosquitto MQTT Broker, Apache Kafka, etc., and the corresponding type : s3, mysql, mqtt, kafka, etc. From location point of view, Data resources can be: on premise (or hosted in some private/public cloud external to compute cloud of Algorithm) cloud-hosted (hosted in the same compute cloud but managed independently of the Algorithm) To enable particular access to data for Algorithms each Data resource has an URI (Uniform Resource Identifier) associated of the form: protocol://host:port/path which specifies the protocol, host and port information, and additional details in the path part (database name, path of the file, topic name) for connection. For example, URI s3://aws.amazon.com/mybucket/myfile.dat specifies a Data resource providing a single file 'myfile.dat' available over S3 protocol at host aws.amazon.com in bucket 'mybucket'.","title":"Introduction"},{"location":"data/#pre-requisites","text":"On-premises Data resources must be accessible for Algorithms running in a cloud, thus they must: be accessible over the public internet have public IP address or domain name corresponding ports open for the domain towards the compute cloud of the Algorithms","title":"Pre-requisites"},{"location":"data/#metadata-describing-data","text":"For a closer look at this metadata, use the following resources: Attribute Listing for an itemised listing of fields Metadata Table for a table-formatted overview Feel free to extend this list as desired","title":"Metadata describing Data"},{"location":"data/#further-reading","text":"This space is for any other required documentation on this asset.","title":"Further reading..."},{"location":"dataassetsmapping/","text":"Data Assets Mapping in DIGITbrain Introduction The Data Assets Mapping substructure in a DMA Tuple will map Data assets with Data Sources that have been specified for each Microservice that makes up an Algorithm. Data Sources describe what type/kind of data the Microservice expects (see the Input Data and Output Data fields). This Data Assets Mapping substructure will be used to connect those Data Sources to concrete Data assets. Pre-requisites Data Sources ( Input Data and/or Output Data ) fields should be specified on at least one of the Microservices that makes up the Algorithm in the DMA Tuple. The Data Assets must already be published on the DIGITbrain platform. Metadata describing Deployment For a closer look at this metadata, use the following resources: Attribute Listing for an itemised listing of fields Metadata Table for a table-formatted overview An example See the below JSON for an example of how Microservice , Data and DataAssetsMapping work together. Microservice Data DataAssetsMapping { \"Microservices\" : [ { \"id\" : \"microservice_aaa_uuid\" , \"deploymentData\" : \"docker run -e STREAM={{ my_kafka_out.DATA_URI }} dfki/img\" , \"outputData\" : [ { \"output_id\" : \"my_kafka_out\" , \"DATA_KIND\" : \"stream\" , \"DATA_SOURCE_TYPE\" : \"kafka\" , //e t c... }, { \"output_id\" : \"my_file_out\" , //e t c... } ], }, { \"id\" : \"microservice_bbb_uuid\" , //e t c... \"inputData\" : [ { \"input_id\" : \"my_stream_in\" , \"DATA_KIND\" : \"stream\" , \"DATA_SOURCE_TYPE\" : \"kafka\" , //e t c... }, ], } ], \"Data\" : [ { \"id\" : \"data_zzz_uuid\" , \"DATA_DESC\" : \"This is some important data.\" , \"DATA_URI\" : \"kafka://host/topic#1\" , //e t c... }, { \"id\" : \"data_yyy_uuid\" , //e t c... } ], \"DMA Tuple\" : { \"id\" : \"dma_tuple_ggg_uuid\" , \"DataAssetsMapping\" : { \"microservice_aaa\" : { \"my_kafka_out\" : \"data_zzz_uuid\" , \"my_file_out\" : \"data_yyy_uuid\" } \"microservice_bbb_uuid\" : { \"my_stream_in\" : \"data_zzz_uuid\" } } //e t c... }","title":"Data Assets Mapping"},{"location":"dataassetsmapping/#data-assets-mapping-in-digitbrain","text":"","title":"Data Assets Mapping in DIGITbrain"},{"location":"dataassetsmapping/#introduction","text":"The Data Assets Mapping substructure in a DMA Tuple will map Data assets with Data Sources that have been specified for each Microservice that makes up an Algorithm. Data Sources describe what type/kind of data the Microservice expects (see the Input Data and Output Data fields). This Data Assets Mapping substructure will be used to connect those Data Sources to concrete Data assets.","title":"Introduction"},{"location":"dataassetsmapping/#pre-requisites","text":"Data Sources ( Input Data and/or Output Data ) fields should be specified on at least one of the Microservices that makes up the Algorithm in the DMA Tuple. The Data Assets must already be published on the DIGITbrain platform.","title":"Pre-requisites"},{"location":"dataassetsmapping/#metadata-describing-deployment","text":"For a closer look at this metadata, use the following resources: Attribute Listing for an itemised listing of fields Metadata Table for a table-formatted overview","title":"Metadata describing Deployment"},{"location":"dataassetsmapping/#an-example","text":"See the below JSON for an example of how Microservice , Data and DataAssetsMapping work together. Microservice Data DataAssetsMapping { \"Microservices\" : [ { \"id\" : \"microservice_aaa_uuid\" , \"deploymentData\" : \"docker run -e STREAM={{ my_kafka_out.DATA_URI }} dfki/img\" , \"outputData\" : [ { \"output_id\" : \"my_kafka_out\" , \"DATA_KIND\" : \"stream\" , \"DATA_SOURCE_TYPE\" : \"kafka\" , //e t c... }, { \"output_id\" : \"my_file_out\" , //e t c... } ], }, { \"id\" : \"microservice_bbb_uuid\" , //e t c... \"inputData\" : [ { \"input_id\" : \"my_stream_in\" , \"DATA_KIND\" : \"stream\" , \"DATA_SOURCE_TYPE\" : \"kafka\" , //e t c... }, ], } ], \"Data\" : [ { \"id\" : \"data_zzz_uuid\" , \"DATA_DESC\" : \"This is some important data.\" , \"DATA_URI\" : \"kafka://host/topic#1\" , //e t c... }, { \"id\" : \"data_yyy_uuid\" , //e t c... } ], \"DMA Tuple\" : { \"id\" : \"dma_tuple_ggg_uuid\" , \"DataAssetsMapping\" : { \"microservice_aaa\" : { \"my_kafka_out\" : \"data_zzz_uuid\" , \"my_file_out\" : \"data_yyy_uuid\" } \"microservice_bbb_uuid\" : { \"my_stream_in\" : \"data_zzz_uuid\" } } //e t c... }","title":"An example"},{"location":"deployment/","text":"Deployments in DIGITbrain Introduction A deployment in DIGITbrain specifies the infrastructure that a desired DMA Tuple will be deployed across. Here it is necessary to provide details on the type of infrastructure that this deployment will define, along with all the configuration details required by that infrastructure type. Pre-requisites For most DMA Tuples in DIGITbrain, a common set of Deployments will be suitable. Required IDs that describe that common set are available in the documentation that follows below. For some workloads with very specific hardware or software requirements, or for those who require direct access to underlying virtual machines, it may be necessary to raise a ticket with the administrator of your CloudBroker Platform. Where bring-your-own edges are used, DIGITbrain currently supports the following ARM or x86 Architectures Common Linux Distributions Minimum 1 CPU, 1GB RAM and 5GB free disk space Metadata describing Deployment For a closer look at this metadata, use the following resources: Attribute Listing for an itemised listing of fields Metadata Table for a table-formatted overview The Further Reading section below Further reading... This section takes an in-depth look at some of the more complex fields required to describe this asset: type Required \u2013 DIGITbrain supports cloud infrastructure deployed via the CloudBroker platform, or bring-your-own Linux-based Edge devices. This should be specified in this field. The other metadata in this section should be completed according to the type (e.g. CloudBroker-specific metadata is not required if type: edge ) cloudbroker edge type : cloudbroker cloudbroker : deployment_id : instance_type_id : key_pair_id : opened_port : endpoint : type : edge edge : endpoint : cloudbroker.deployment_id Required \u2013 A CloudBroker deployment ties together software, resource and region. Indicative IDs are given below, but any LTS Debian-based Linux distribution should be supported. It is recommended to use the MiCADO-Optimised deployment. MiCADO-Optimised Ubuntu 20.04 Ubuntu 18.04 Custom cloudbroker : deployment_id : 27f3dd48-1dac-4d3c-8b7f-39338ed55543 cloudbroker : deployment_id : 16b1e2d4-3a2c-406e-8c45-5637099021f0 cloudbroker : deployment_id : 5a081b54-8992-4ff7-8a21-74e425062507 <!-- Find your deployment_id at this URL --> https:// < cloudbroker-endpoint > /deployments/ < deployment-id > cloudbroker.instance_type_id Required \u2013 The CloudBroker instance type defines the CPU and RAM that will be available on the infrastructure. Indicative IDs are given below. The minimum requirements are a 2 vCPU/2GB RAM 2 vCPU | 4GB RAM 4 vCPU | 8GB RAM 8 vCPU | 16GB RAM Custom cloudbroker : instance_type_id : ca727925-a5ca-4697-b2c3-8788d82457d5 cloudbroker : instance_type_id : ffb42759-fb52-4401-9c75-889ea0ed9602 cloudbroker : instance_type_id : 664330f3-42b1-4f52-a675-fd182a21ef51 <!-- Find your instance_type_id at this URL --> https:// < cloudbroker-endpoint > /instance_types/ < instance-type-id > cloudbroker.key_pair_id Optional \u2013 The CloudBroker ID for an SSH key pair, for remote access to the infrastructure. A key pair must be created on the platform. Custom <!-- Find your key_pair_id at this URL --> https:// < cloudbroker-endpoint > /key_pairs/ < key-pair-id > cloudbroker.opened_port Optional \u2013 A comma-separated string listing port numbers, which will be opened on the instance (both TCP and UDP protocols will be affected). Custom cloudbroker : opened_port : 80,443,8080,30010 cloudbroker.endpoint Required \u2013 The endpoint of the CloudBroker platform that will handle the deployment of the above infrastructure. DIGITbrain cloudbroker : endpoint : https://cloudsme-cbp.scaletools.com.ua edge.endpoint Required \u2013 The endpoint of the bring-your-own Edge device that provides this Deployment. Your Edge Device edge : endpoint : https://192.168.1.1","title":"Deployment"},{"location":"deployment/#deployments-in-digitbrain","text":"","title":"Deployments in DIGITbrain"},{"location":"deployment/#introduction","text":"A deployment in DIGITbrain specifies the infrastructure that a desired DMA Tuple will be deployed across. Here it is necessary to provide details on the type of infrastructure that this deployment will define, along with all the configuration details required by that infrastructure type.","title":"Introduction"},{"location":"deployment/#pre-requisites","text":"For most DMA Tuples in DIGITbrain, a common set of Deployments will be suitable. Required IDs that describe that common set are available in the documentation that follows below. For some workloads with very specific hardware or software requirements, or for those who require direct access to underlying virtual machines, it may be necessary to raise a ticket with the administrator of your CloudBroker Platform. Where bring-your-own edges are used, DIGITbrain currently supports the following ARM or x86 Architectures Common Linux Distributions Minimum 1 CPU, 1GB RAM and 5GB free disk space","title":"Pre-requisites"},{"location":"deployment/#metadata-describing-deployment","text":"For a closer look at this metadata, use the following resources: Attribute Listing for an itemised listing of fields Metadata Table for a table-formatted overview The Further Reading section below","title":"Metadata describing Deployment"},{"location":"deployment/#further-reading","text":"This section takes an in-depth look at some of the more complex fields required to describe this asset: type Required \u2013 DIGITbrain supports cloud infrastructure deployed via the CloudBroker platform, or bring-your-own Linux-based Edge devices. This should be specified in this field. The other metadata in this section should be completed according to the type (e.g. CloudBroker-specific metadata is not required if type: edge ) cloudbroker edge type : cloudbroker cloudbroker : deployment_id : instance_type_id : key_pair_id : opened_port : endpoint : type : edge edge : endpoint : cloudbroker.deployment_id Required \u2013 A CloudBroker deployment ties together software, resource and region. Indicative IDs are given below, but any LTS Debian-based Linux distribution should be supported. It is recommended to use the MiCADO-Optimised deployment. MiCADO-Optimised Ubuntu 20.04 Ubuntu 18.04 Custom cloudbroker : deployment_id : 27f3dd48-1dac-4d3c-8b7f-39338ed55543 cloudbroker : deployment_id : 16b1e2d4-3a2c-406e-8c45-5637099021f0 cloudbroker : deployment_id : 5a081b54-8992-4ff7-8a21-74e425062507 <!-- Find your deployment_id at this URL --> https:// < cloudbroker-endpoint > /deployments/ < deployment-id > cloudbroker.instance_type_id Required \u2013 The CloudBroker instance type defines the CPU and RAM that will be available on the infrastructure. Indicative IDs are given below. The minimum requirements are a 2 vCPU/2GB RAM 2 vCPU | 4GB RAM 4 vCPU | 8GB RAM 8 vCPU | 16GB RAM Custom cloudbroker : instance_type_id : ca727925-a5ca-4697-b2c3-8788d82457d5 cloudbroker : instance_type_id : ffb42759-fb52-4401-9c75-889ea0ed9602 cloudbroker : instance_type_id : 664330f3-42b1-4f52-a675-fd182a21ef51 <!-- Find your instance_type_id at this URL --> https:// < cloudbroker-endpoint > /instance_types/ < instance-type-id > cloudbroker.key_pair_id Optional \u2013 The CloudBroker ID for an SSH key pair, for remote access to the infrastructure. A key pair must be created on the platform. Custom <!-- Find your key_pair_id at this URL --> https:// < cloudbroker-endpoint > /key_pairs/ < key-pair-id > cloudbroker.opened_port Optional \u2013 A comma-separated string listing port numbers, which will be opened on the instance (both TCP and UDP protocols will be affected). Custom cloudbroker : opened_port : 80,443,8080,30010 cloudbroker.endpoint Required \u2013 The endpoint of the CloudBroker platform that will handle the deployment of the above infrastructure. DIGITbrain cloudbroker : endpoint : https://cloudsme-cbp.scaletools.com.ua edge.endpoint Required \u2013 The endpoint of the bring-your-own Edge device that provides this Deployment. Your Edge Device edge : endpoint : https://192.168.1.1","title":"Further reading..."},{"location":"dma_tuple/","text":"Data-Model-Algorithm Tuples in DIGITbrain Introduction A DMA Tuple (i.e. Data-Model-Algorithm Tuple) is built by connecting one behaviour of an IP Instance represented by an MA Pair of the corresponding IP Family with Data resources (zero or more) associated to the same IP Instance as illustrated in the following figure. Multiple active DMA Tuples associated to a given IP Instance represent a valid Digital Twin for a specific point in time. DMA Tuples associated to a Digital Twin can be activated or deactivated according to the needs of the IP Instance, facilitating the flexible reconfiguration of Digital Twins without the needs for creating dedicated Digital Twins. Such a flexible reconfiguration allows for the on-demand customisation of Digital Twins and IP Instances to adapt to changing conditions within the production site. Pre-requisites The IP Instance (i.e. Industrial-Product Instance), the MA Pair (i.e. Model-Algorithm Pair), and the Data Asset to be referenced by the DMA Tuple would need to be published beforehand, in order to facilitate the creation and publishing of the DMA Tuple. Metadata describing DMA Tuples For a closer look at this metadata, use the following resources: Attribute Listing for an itemised listing of fields Metadata Table for a table-formatted overview Feel free to extend this list as desired Further reading... The following figure shows how the elements that constitute a DMA Tuple (i.e. Microservices, Algorithms, Models, MA Pairs, Data) of a Digital Twin in the DIGITbrain Solution are hierarchically structured; a higher hierarchy indicates more specialisation and more relation to the manufacturing process where the Digital Twin is used. The following figure also illustrates how the collective intelligence within the DIGITbrain Solution is exploited. On the one side, a software developer might have no notion of a given manufacturing process where the developed Microservice could be used; nevertheless, by leveraging the know-how of additional experts, DMA Tuples can be configured for Digital Twins with the developed Microservice, unlocking its full benefits. On the other side, a production manager might have no deep understanding of a given microservice; however, the involvement of other experts facilitates its utilisation within the context of a DMA Tuple without the need for a dedicated training or detailed know-how about the Microservice itself. This hierarchical abstraction largely contributes to one of the main technical objectives of the DIGITbrain Solution and the Digital Product Brain: to democratise the adoption of Digital Twins in the manufacturing industry (especially for SMEs). To this end, the Digital Product Brain is built upon core principles such as: - reusability: lower Db Assets are individually reused in higher Db Assets and the DMA Tuple as many times as appropriate; - versatility: Db Assets are published with customised metadata, covering more use cases and scenarios; - sovereignty: Db Assets only store references to the actual assets (governed by the owners) and DMA Tuples are stored in dedicated storage (governed by the IPI owner); - modularity: DMA Tuples are composed by interchangeable Db Assets, which are selected depending on the targeted properties (e.g. price, performance, accuracy); - simplicity: every Db Asset Provider uses a dedicated web form (of the Db Publishing Interface) for publishing the Db Asset, only focusing on the essential metadata; and - homogeneity: Db Assets and DMA Tuples are interfaced in the same manner regardless of their nature but without limiting their individual capabilities. The following figure generally illustrates the process flow involved in the development and publishing of a Db Asset, as well as the composition, the deployment, and the evaluation of a DMA Tuple. The following figure also highlights that a DMA Tuple is composed, deployed, and evaluated by a manufacturing end user with the proper access to the IP Instance to be associated with the DMA Tuple.","title":"DMA Tuple"},{"location":"dma_tuple/#data-model-algorithm-tuples-in-digitbrain","text":"","title":"Data-Model-Algorithm Tuples in DIGITbrain"},{"location":"dma_tuple/#introduction","text":"A DMA Tuple (i.e. Data-Model-Algorithm Tuple) is built by connecting one behaviour of an IP Instance represented by an MA Pair of the corresponding IP Family with Data resources (zero or more) associated to the same IP Instance as illustrated in the following figure. Multiple active DMA Tuples associated to a given IP Instance represent a valid Digital Twin for a specific point in time. DMA Tuples associated to a Digital Twin can be activated or deactivated according to the needs of the IP Instance, facilitating the flexible reconfiguration of Digital Twins without the needs for creating dedicated Digital Twins. Such a flexible reconfiguration allows for the on-demand customisation of Digital Twins and IP Instances to adapt to changing conditions within the production site.","title":"Introduction"},{"location":"dma_tuple/#pre-requisites","text":"The IP Instance (i.e. Industrial-Product Instance), the MA Pair (i.e. Model-Algorithm Pair), and the Data Asset to be referenced by the DMA Tuple would need to be published beforehand, in order to facilitate the creation and publishing of the DMA Tuple.","title":"Pre-requisites"},{"location":"dma_tuple/#metadata-describing-dma-tuples","text":"For a closer look at this metadata, use the following resources: Attribute Listing for an itemised listing of fields Metadata Table for a table-formatted overview Feel free to extend this list as desired","title":"Metadata describing DMA Tuples"},{"location":"dma_tuple/#further-reading","text":"The following figure shows how the elements that constitute a DMA Tuple (i.e. Microservices, Algorithms, Models, MA Pairs, Data) of a Digital Twin in the DIGITbrain Solution are hierarchically structured; a higher hierarchy indicates more specialisation and more relation to the manufacturing process where the Digital Twin is used. The following figure also illustrates how the collective intelligence within the DIGITbrain Solution is exploited. On the one side, a software developer might have no notion of a given manufacturing process where the developed Microservice could be used; nevertheless, by leveraging the know-how of additional experts, DMA Tuples can be configured for Digital Twins with the developed Microservice, unlocking its full benefits. On the other side, a production manager might have no deep understanding of a given microservice; however, the involvement of other experts facilitates its utilisation within the context of a DMA Tuple without the need for a dedicated training or detailed know-how about the Microservice itself. This hierarchical abstraction largely contributes to one of the main technical objectives of the DIGITbrain Solution and the Digital Product Brain: to democratise the adoption of Digital Twins in the manufacturing industry (especially for SMEs). To this end, the Digital Product Brain is built upon core principles such as: - reusability: lower Db Assets are individually reused in higher Db Assets and the DMA Tuple as many times as appropriate; - versatility: Db Assets are published with customised metadata, covering more use cases and scenarios; - sovereignty: Db Assets only store references to the actual assets (governed by the owners) and DMA Tuples are stored in dedicated storage (governed by the IPI owner); - modularity: DMA Tuples are composed by interchangeable Db Assets, which are selected depending on the targeted properties (e.g. price, performance, accuracy); - simplicity: every Db Asset Provider uses a dedicated web form (of the Db Publishing Interface) for publishing the Db Asset, only focusing on the essential metadata; and - homogeneity: Db Assets and DMA Tuples are interfaced in the same manner regardless of their nature but without limiting their individual capabilities. The following figure generally illustrates the process flow involved in the development and publishing of a Db Asset, as well as the composition, the deployment, and the evaluation of a DMA Tuple. The following figure also highlights that a DMA Tuple is composed, deployed, and evaluated by a manufacturing end user with the proper access to the IP Instance to be associated with the DMA Tuple.","title":"Further reading..."},{"location":"ma_pair/","text":"Model-Algorithm Pairs in DIGITbrain Introduction MA Pairs (i.e. Model-Algorithm Pairs) are each composed of one Model and one Algorithms to describe a certain behaviour of an IP Family. An MA Pair corresponds to one behaviour of the respective IP Family \u2013 a behaviour can serve more than one purpose. The metadata includes the references to already published Model (\u201cM Asset\u201d) and Algorithm (\u201cA Asset\u201d) within the Db Asset Metadata Registry. The configurable information related to the \u201cRules\u201d (to determine when to trigger an action), \u201cFrequency\u201d (to determine how often an evaluation should be triggered), and \u201cPayload\u201d (to include any additional information that has not been homogenised nor standardised). The processes of publishing an MA Pair relies on previously published and reused Db Assets (e.g. Microservices, Algorithms, Models, IP Families) as illustrated in the following figure. Pre-requisites The IP Family (i.e. Industrial-Product Family), the Model Asset, and the Algorithm Asset to be referenced by the MA Pair would need to be published beforehand, in order to facilitate the creation and publishing of the MA Pair. Metadata describing MA Pairs For a closer look at this metadata, use the following resources: Attribute Listing for an itemised listing of fields Metadata Table for a table-formatted overview Feel free to extend this list as desired Further reading... The following figure shows how the elements that constitute a DMA Tuple (i.e. Microservices, Algorithms, Models, MA Pairs, Data) of a Digital Twin in the DIGITbrain Solution are hierarchically structured; a higher hierarchy indicates more specialisation and more relation to the manufacturing process where the Digital Twin is used. The following figure also illustrates how the collective intelligence within the DIGITbrain Solution is exploited. On the one side, a software developer might have no notion of a given manufacturing process where the developed Microservice could be used; nevertheless, by leveraging the know-how of additional experts, DMA Tuples can be configured for Digital Twins with the developed Microservice, unlocking its full benefits. On the other side, a production manager might have no deep understanding of a given microservice; however, the involvement of other experts facilitates its utilisation within the context of a DMA Tuple without the need for a dedicated training or detailed know-how about the Microservice itself. This hierarchical abstraction largely contributes to one of the main technical objectives of the DIGITbrain Solution and the Digital Product Brain: to democratise the adoption of Digital Twins in the manufacturing industry (especially for SMEs). To this end, the Digital Product Brain is built upon core principles such as: - reusability: lower Db Assets are individually reused in higher Db Assets and the DMA Tuple as many times as appropriate; - versatility: Db Assets are published with customised metadata, covering more use cases and scenarios; - sovereignty: Db Assets only store references to the actual assets (governed by the owners) and DMA Tuples are stored in dedicated storage (governed by the IPI owner); - modularity: DMA Tuples are composed by interchangeable Db Assets, which are selected depending on the targeted properties (e.g. price, performance, accuracy); - simplicity: every Db Asset Provider uses a dedicated web form (of the Db Publishing Interface) for publishing the Db Asset, only focusing on the essential metadata; and - homogeneity: Db Assets and DMA Tuples are interfaced in the same manner regardless of their nature but without limiting their individual capabilities. The following figure generally illustrates the process flow involved in the development and publishing of a Db Asset, as well as the composition, the deployment, and the evaluation of a DMA Tuple. The following figure also highlights that an MA Pair is developed and published by a domain expert with the propser knowledge to describe the behavior presented by the MA Pair.","title":"MA Pair"},{"location":"ma_pair/#model-algorithm-pairs-in-digitbrain","text":"","title":"Model-Algorithm Pairs in DIGITbrain"},{"location":"ma_pair/#introduction","text":"MA Pairs (i.e. Model-Algorithm Pairs) are each composed of one Model and one Algorithms to describe a certain behaviour of an IP Family. An MA Pair corresponds to one behaviour of the respective IP Family \u2013 a behaviour can serve more than one purpose. The metadata includes the references to already published Model (\u201cM Asset\u201d) and Algorithm (\u201cA Asset\u201d) within the Db Asset Metadata Registry. The configurable information related to the \u201cRules\u201d (to determine when to trigger an action), \u201cFrequency\u201d (to determine how often an evaluation should be triggered), and \u201cPayload\u201d (to include any additional information that has not been homogenised nor standardised). The processes of publishing an MA Pair relies on previously published and reused Db Assets (e.g. Microservices, Algorithms, Models, IP Families) as illustrated in the following figure.","title":"Introduction"},{"location":"ma_pair/#pre-requisites","text":"The IP Family (i.e. Industrial-Product Family), the Model Asset, and the Algorithm Asset to be referenced by the MA Pair would need to be published beforehand, in order to facilitate the creation and publishing of the MA Pair.","title":"Pre-requisites"},{"location":"ma_pair/#metadata-describing-ma-pairs","text":"For a closer look at this metadata, use the following resources: Attribute Listing for an itemised listing of fields Metadata Table for a table-formatted overview Feel free to extend this list as desired","title":"Metadata describing MA Pairs"},{"location":"ma_pair/#further-reading","text":"The following figure shows how the elements that constitute a DMA Tuple (i.e. Microservices, Algorithms, Models, MA Pairs, Data) of a Digital Twin in the DIGITbrain Solution are hierarchically structured; a higher hierarchy indicates more specialisation and more relation to the manufacturing process where the Digital Twin is used. The following figure also illustrates how the collective intelligence within the DIGITbrain Solution is exploited. On the one side, a software developer might have no notion of a given manufacturing process where the developed Microservice could be used; nevertheless, by leveraging the know-how of additional experts, DMA Tuples can be configured for Digital Twins with the developed Microservice, unlocking its full benefits. On the other side, a production manager might have no deep understanding of a given microservice; however, the involvement of other experts facilitates its utilisation within the context of a DMA Tuple without the need for a dedicated training or detailed know-how about the Microservice itself. This hierarchical abstraction largely contributes to one of the main technical objectives of the DIGITbrain Solution and the Digital Product Brain: to democratise the adoption of Digital Twins in the manufacturing industry (especially for SMEs). To this end, the Digital Product Brain is built upon core principles such as: - reusability: lower Db Assets are individually reused in higher Db Assets and the DMA Tuple as many times as appropriate; - versatility: Db Assets are published with customised metadata, covering more use cases and scenarios; - sovereignty: Db Assets only store references to the actual assets (governed by the owners) and DMA Tuples are stored in dedicated storage (governed by the IPI owner); - modularity: DMA Tuples are composed by interchangeable Db Assets, which are selected depending on the targeted properties (e.g. price, performance, accuracy); - simplicity: every Db Asset Provider uses a dedicated web form (of the Db Publishing Interface) for publishing the Db Asset, only focusing on the essential metadata; and - homogeneity: Db Assets and DMA Tuples are interfaced in the same manner regardless of their nature but without limiting their individual capabilities. The following figure generally illustrates the process flow involved in the development and publishing of a Db Asset, as well as the composition, the deployment, and the evaluation of a DMA Tuple. The following figure also highlights that an MA Pair is developed and published by a domain expert with the propser knowledge to describe the behavior presented by the MA Pair.","title":"Further reading..."},{"location":"microservice/","text":"Microservices in DIGITbrain Introduction Microservices are the smallest building-block in DIGITbrain. They are containerised applications that provide some required functionality. Microservices can be composed together to create an Algorithm, which uses the functionality of potentially multiple Microservices to realise some goal. Pre-requisites Microservices in DIGITbrain must be containerised in an OCI-compliant image format. The most common format for this is Docker but other formats are also suitable. Once built, your container must be pushed to a Container Registry. DockerHub offers free public and paid private repositories, or the DIGITbrain platform itself offers private repositories on a private registry. Contact an administrator for access to the DIGITbrain private registry. Metadata describing Microservices For a closer look at this metadata, use the following resources: Attribute Listing for an itemised listing of fields Metadata Table for a table-formatted overview Feel free to extend this list as desired Further reading... This space is for any other required documentation on this asset.","title":"Microservice"},{"location":"microservice/#microservices-in-digitbrain","text":"","title":"Microservices in DIGITbrain"},{"location":"microservice/#introduction","text":"Microservices are the smallest building-block in DIGITbrain. They are containerised applications that provide some required functionality. Microservices can be composed together to create an Algorithm, which uses the functionality of potentially multiple Microservices to realise some goal.","title":"Introduction"},{"location":"microservice/#pre-requisites","text":"Microservices in DIGITbrain must be containerised in an OCI-compliant image format. The most common format for this is Docker but other formats are also suitable. Once built, your container must be pushed to a Container Registry. DockerHub offers free public and paid private repositories, or the DIGITbrain platform itself offers private repositories on a private registry. Contact an administrator for access to the DIGITbrain private registry.","title":"Pre-requisites"},{"location":"microservice/#metadata-describing-microservices","text":"For a closer look at this metadata, use the following resources: Attribute Listing for an itemised listing of fields Metadata Table for a table-formatted overview Feel free to extend this list as desired","title":"Metadata describing Microservices"},{"location":"microservice/#further-reading","text":"This space is for any other required documentation on this asset.","title":"Further reading..."},{"location":"model/","text":"Models in DIGITbrain Introduction A model in DIGITbrain is an asset that contains the knowledge related to a specific industrial product instance (i.e., a concrete manufacturing machine or production line), which can hence describe and forecast the behavior of such an instance when specific operating conditions are given (n.b., the process of forecasting a system\u2019s behavior according to specific operating conditions is also known as model evaluation). Pre-requisites Models must be accessible from Algorithms for evaluation, thus they must be located in the specific DIGITbrain Model repository. Metadata describing Models For a closer look at this metadata, use the following resources: Attribute Listing for an itemised listing of fields Metadata Table for a table-formatted overview Further reading... This section takes an in-depth look at some of the Parameters fields required to describe this asset: In-slots and Outputs These fields have the same structure, detailed below. They include, as an array of objects, all inputs and parameters ( In-slots ) or Outputs to be defined for the Model to be evaluated, such as: Key This field is of the type of group.key, e.g., type.name of each variable Name This is a human-readable name of the variable Dimensions This field describes the number of dimensions of the variable to treat it as a scalar, a vector field, etc. Is-continuous This field describes whether the variable is continuous or discrete Units This field contains several subkeys, as it follows Unit This field indicates the unit of measurement of the variable (e.g., s, Pa, m/s, etc.) Exponents This field contains an array of numbers defining exponents for the 7 base SI units, i.e., Length - meter (m), Time - second (s), Amount of substance - mole (mole), Electric current - ampere (A), Temperature - Kelvin (K), Luminous intensity - candela (cd), Mass - kilogram (kg). For example the derived For example N would be represented by the array {1, -2, 0, 0, 0, 0, 1} Offset This field contains the offset scale, if needed (e.g., K to \u00baC conversion) Scale This field describes the order of magnitude of the measurement unit scale, e.g., 10^-3 for values expressed mm Default-value This field contains the default value for variable Ranges This field is an array containing both max and min values of the variable In-slots Key : Name : Dimensions : Is-continuous : Units : Unit : Exponents : Offset : Scale : Default-value : Ranges : Outputs Key : Name : Dimensions : Is-continuous : Units : Unit : Exponents : Offset : Scale : Default-value : Ranges : CosimSolverInfo Optional: This object is made up of several fields that are optional and only needed in case of co-simulation Type ( Description field) only. The additional fields needed in co-simulation are: * Dependant FMUs Contains a field with an array of URI for dependant FMU localisation * OS Requirements Contains a set of fields defining OS requirements for co-simulation * Hardware Requirements Contains a set of fields defining Hardware requirements for co-simulation Dependant FMUs Dependencies : OS Requirements Key : osArch : osType : osDistribution : Hardware Requirements recommendedNumberOfGPUCores : minimumNumberOfGPUCores : recommendedGPURAM : minimumGPURAM : recommendedRAM : minimumRAM : recommendedCPUs : minimumCPUs : requiredDiskSpace :","title":"Model"},{"location":"model/#models-in-digitbrain","text":"","title":"Models in DIGITbrain"},{"location":"model/#introduction","text":"A model in DIGITbrain is an asset that contains the knowledge related to a specific industrial product instance (i.e., a concrete manufacturing machine or production line), which can hence describe and forecast the behavior of such an instance when specific operating conditions are given (n.b., the process of forecasting a system\u2019s behavior according to specific operating conditions is also known as model evaluation).","title":"Introduction"},{"location":"model/#pre-requisites","text":"Models must be accessible from Algorithms for evaluation, thus they must be located in the specific DIGITbrain Model repository.","title":"Pre-requisites"},{"location":"model/#metadata-describing-models","text":"For a closer look at this metadata, use the following resources: Attribute Listing for an itemised listing of fields Metadata Table for a table-formatted overview","title":"Metadata describing Models"},{"location":"model/#further-reading","text":"This section takes an in-depth look at some of the Parameters fields required to describe this asset: In-slots and Outputs These fields have the same structure, detailed below. They include, as an array of objects, all inputs and parameters ( In-slots ) or Outputs to be defined for the Model to be evaluated, such as: Key This field is of the type of group.key, e.g., type.name of each variable Name This is a human-readable name of the variable Dimensions This field describes the number of dimensions of the variable to treat it as a scalar, a vector field, etc. Is-continuous This field describes whether the variable is continuous or discrete Units This field contains several subkeys, as it follows Unit This field indicates the unit of measurement of the variable (e.g., s, Pa, m/s, etc.) Exponents This field contains an array of numbers defining exponents for the 7 base SI units, i.e., Length - meter (m), Time - second (s), Amount of substance - mole (mole), Electric current - ampere (A), Temperature - Kelvin (K), Luminous intensity - candela (cd), Mass - kilogram (kg). For example the derived For example N would be represented by the array {1, -2, 0, 0, 0, 0, 1} Offset This field contains the offset scale, if needed (e.g., K to \u00baC conversion) Scale This field describes the order of magnitude of the measurement unit scale, e.g., 10^-3 for values expressed mm Default-value This field contains the default value for variable Ranges This field is an array containing both max and min values of the variable In-slots Key : Name : Dimensions : Is-continuous : Units : Unit : Exponents : Offset : Scale : Default-value : Ranges : Outputs Key : Name : Dimensions : Is-continuous : Units : Unit : Exponents : Offset : Scale : Default-value : Ranges : CosimSolverInfo Optional: This object is made up of several fields that are optional and only needed in case of co-simulation Type ( Description field) only. The additional fields needed in co-simulation are: * Dependant FMUs Contains a field with an array of URI for dependant FMU localisation * OS Requirements Contains a set of fields defining OS requirements for co-simulation * Hardware Requirements Contains a set of fields defining Hardware requirements for co-simulation Dependant FMUs Dependencies : OS Requirements Key : osArch : osType : osDistribution : Hardware Requirements recommendedNumberOfGPUCores : minimumNumberOfGPUCores : recommendedGPURAM : minimumGPURAM : recommendedRAM : minimumRAM : recommendedCPUs : minimumCPUs : requiredDiskSpace :","title":"Further reading..."},{"location":"start/","text":"Getting Started With DIGITbrain Whether you want to publish a Microservice, create an Algorithm, or describe some Data, there are some simple steps to getting started with the DIGITbrain platform. The documentation for each asset describes necessary pre-requisities and more detail on required fields. See the list below: Microservice Algorithm Model Data MA Pair DMA Tuple Deployment","title":"Getting Started"},{"location":"start/#getting-started-with-digitbrain","text":"Whether you want to publish a Microservice, create an Algorithm, or describe some Data, there are some simple steps to getting started with the DIGITbrain platform. The documentation for each asset describes necessary pre-requisities and more detail on required fields. See the list below: Microservice Algorithm Model Data MA Pair DMA Tuple Deployment","title":"Getting Started With DIGITbrain"},{"location":"supporting_metadata/","text":"Supporting Metadata in DIGITbrain Introduction Here is an introduction to Supporting Metadata. Pre-requisites Information on any requirements imposed on this asset. Metadata describing Supporting Metadata For a closer look at this metadata, use the following resources: Attribute Listing for an itemised listing of fields Metadata Table for a table-formatted overview Feel free to extend this list as desired Further reading... This space is for any other required documentation on this asset.","title":"Supporting Metadata"},{"location":"supporting_metadata/#supporting-metadata-in-digitbrain","text":"","title":"Supporting Metadata in DIGITbrain"},{"location":"supporting_metadata/#introduction","text":"Here is an introduction to Supporting Metadata.","title":"Introduction"},{"location":"supporting_metadata/#pre-requisites","text":"Information on any requirements imposed on this asset.","title":"Pre-requisites"},{"location":"supporting_metadata/#metadata-describing-supporting-metadata","text":"For a closer look at this metadata, use the following resources: Attribute Listing for an itemised listing of fields Metadata Table for a table-formatted overview Feel free to extend this list as desired","title":"Metadata describing Supporting Metadata"},{"location":"supporting_metadata/#further-reading","text":"This space is for any other required documentation on this asset.","title":"Further reading..."},{"location":"attributes/algorithm/","text":".md-content__button { display: none; } Algorithm Fields This information is also available in table format Available Fields The metadata specification for a DIGITbrain Algorithm has these sections: Description Algorithm Description id Auto-generated - String - a unique id to identify this asset Example algorithm_10824912410291 name Required - String - a human-readable name to ease identification and discoverability for human users Example Object Detection Algorithm for detection of faulty weld seams description Required - String - a short, human-readable description of the Algorithm to aid a human user in analysing the Algorithm\u2019s capabilities and its applicability to a certain problem Example This algorithm can be used to solve a specifc problem, and applies some fancy technologies. classificationSchema Required - Enumeration { Simulation, ML, others } - the classification of the Algorithm, to describe the specialization area Example ML type Required - List( String) - a detailed list of attributes to describe the Algorithm\u2019s field of application Example { neural network , deep learning , convolutional neural network , CNN } author Required - String - the authoring entity Example DFKI date Auto-generated - Date - the creation data Example 06.04.2021 version Required - String - the version Example 1.0 Algorithm listOfMicroservices Required - List( String) - a list of Microservice Asset IDs, which are contained in the algorithm Example [ microservice.microservice_id_A , microservice.microservice_id_B ] deploymentMapping Required - Map( String: String) - a mapping specifying which microservice should run on which host. By default each microservice is assigned a respective host, but this behaviour is not always ideal (eg. when two or more Microservices may need to run on the same host) Example { microservice.microservice_id_A : deployment.microservice_id_B , microservice.microservice_id_B : deployment.microservice_id_B }","title":"Algorithm"},{"location":"attributes/algorithm/#algorithm-fields","text":"This information is also available in table format","title":"Algorithm Fields"},{"location":"attributes/algorithm/#available-fields","text":"The metadata specification for a DIGITbrain Algorithm has these sections: Description Algorithm","title":"Available Fields"},{"location":"attributes/algorithm/#description_1","text":"id Auto-generated - String - a unique id to identify this asset Example algorithm_10824912410291 name Required - String - a human-readable name to ease identification and discoverability for human users Example Object Detection Algorithm for detection of faulty weld seams description Required - String - a short, human-readable description of the Algorithm to aid a human user in analysing the Algorithm\u2019s capabilities and its applicability to a certain problem Example This algorithm can be used to solve a specifc problem, and applies some fancy technologies. classificationSchema Required - Enumeration { Simulation, ML, others } - the classification of the Algorithm, to describe the specialization area Example ML type Required - List( String) - a detailed list of attributes to describe the Algorithm\u2019s field of application Example { neural network , deep learning , convolutional neural network , CNN } author Required - String - the authoring entity Example DFKI date Auto-generated - Date - the creation data Example 06.04.2021 version Required - String - the version Example 1.0","title":"Description"},{"location":"attributes/algorithm/#algorithm","text":"listOfMicroservices Required - List( String) - a list of Microservice Asset IDs, which are contained in the algorithm Example [ microservice.microservice_id_A , microservice.microservice_id_B ] deploymentMapping Required - Map( String: String) - a mapping specifying which microservice should run on which host. By default each microservice is assigned a respective host, but this behaviour is not always ideal (eg. when two or more Microservices may need to run on the same host) Example { microservice.microservice_id_A : deployment.microservice_id_B , microservice.microservice_id_B : deployment.microservice_id_B }","title":"Algorithm"},{"location":"attributes/data/","text":".md-content__button { display: none; } Data Fields This information is also available in table format Available Fields The metadata specification for a DIGITbrain Data has these sections: Administrative data Description Search support Datakind specification Data access specification Open parameters Further access clauses (extensible) Data content semantics Administrative data ID Auto-generated - id - Unique identifier of the data resource. Example UUID AUTHOR Auto-generated - id - Unique identifier of the user who created this record Example UUID PROVIDER Auto-generated - id - Legal entity who provides the data resource (owner). It is the affiliation of the author by default. Example UUID DATE Auto-generated - timestamp - Date of data resource registration. Example 10:45:13 CET 21/03/2021 Description DATA_NAME Required - string - Name of the data resource. (The directory hierarchy in Nexus provides a fully qualified (FQ) name, which is unique.) Example CNSPiezoBolt#1 (in directory : factory 1 , machine1 , piezobolts) DATA_VERSION Optional - string - Version of this data resource entry (major.minor.patch). Defaults to 1.0.0 Example 2.3.4 DATA_DESC Optional - string - Human readable description of the data resource. Example This sensor measures temperature in Celsius, sends data via ConSenses edge device via an MQTT broker DATA_DESC_URL Optional - URL - More detailed specification of data source characteristics (doc, pdf, \u2026) Example data-source-specification-sheet.pdf DATA_SIZE Optional - integer - Estimated/exact size of data (e.g. file size, volume size, or message size); might be used to assess HW requirements (RAM, CPU) . In bytes (k - kilo, m - mega, t - tera, p - peta) Example 112m Search support DATA_TAGS Optional - list of strings - A list of tags freely added to help in searching/indexing (not limited to a basic set of tags, keywords) Example [ camera , rgb , w640 , h480 , jpg ] Datakind specification DATA_KIND Required - enum - Type of the data resource (e.g. file/object storage, database management system, streaming broker). FILE can mean a single file or a folder. Example FILE , DATABASE , STREAM DATA_DIRECTION Required - enum - Direction of data flow (source: data provider, sink: data consumer/storage) Example SOURCE , SINK , BIDIRECTIONAL DATA_FORMAT Optional - list of strings - Format/encoding of the data produced or consumed by the data resource as a MIME type (IETF RFC 6838 https://www.sitepoint.com/mime-types-complete-list/). More than one can appear here (remote directory with several files). Example [ { application/json , text/plain , application/octet-stream , application/zip } ] Data access specification DATA_STORE_TYPE Optional - string - The exact type of the data resource. Typically corresponds to the scheme part (scheme://) of DATA_URI. Example S3 , MYSQL , MQTT , ... (WP6 : DATA_SOURCE_TYPE=LOCAL, PATH=...\") DATA_URI Optional - URI - Accessibility of the data resource, including host, port information, protocol, and other fields (path is protocol dependent, can be a topic name). GUI may show host, port, path separately. Hidden at search. Format: scheme://host:port/path. Pseudo vars: DATA_PROTOCOL, DATA_HOST, DATA_PORT, DATA_PATH, DATA_QUERY, DATA_FRAGMENT. Example s3://amazonaws/bucket/object , kafka://host/topic#1 , ... DATA_AUTH Optional - list of enums - One or more authentication types that can be accepted by the storage resource. Example [ { none , userpass , accesskey_secretkey , ssl_certificate , tls_mutual , access_token , rclone_config } + ] Open parameters DATA_CREDENTIALS Optional - OPEN - Credentials (e.g. string/json, zip, config file) Further access clauses (extensible) DATA_PROTOCOL Optional - string - Protocol to use in communication with the data source, only if DATA_TYPE does not imply it (e.g. S3 over HTTP). Moved from to Data access specification. Note this is not necessarily the scheme part of the URI. Example HTTP, HTTPS, TCP, UDP DATA_MYSQL_DIALECT Optional - string - Protocol dialect to be used in communication with the database Example mysqldialect , mariadbdialect DATA_MQTT_PROTOCOL_VERSION Optional - string - MQTT protocol version must be used Example 3.1.1, 5.0 DATA_KAFKA_BROKER_VERSION Optional - string - Kafka broker version Example 2.7.0 DATA_S3_REGION Optional - string - S3 region Example eu-central-1 Data content semantics DATA_SCHEMA Optional - string - Describes message internal structure, semantics, ontology. It can be any file (doc, rdf, owl, etc.). Asset Administration Shell, IEC 61360 - Common Data Dictionary, ... Example database schema description/contents DATA_SCHEMA_URL Optional - URL - No description available. Example database schema URL DATA_SCHEMA_ADDITIONAL_ATTRIBUTES Optional - string - Further restriction/specialization of DATA_SCHEMA, \u201cgeneral\u201d schema.","title":"Data"},{"location":"attributes/data/#data-fields","text":"This information is also available in table format","title":"Data Fields"},{"location":"attributes/data/#available-fields","text":"The metadata specification for a DIGITbrain Data has these sections: Administrative data Description Search support Datakind specification Data access specification Open parameters Further access clauses (extensible) Data content semantics","title":"Available Fields"},{"location":"attributes/data/#administrative-data","text":"ID Auto-generated - id - Unique identifier of the data resource. Example UUID AUTHOR Auto-generated - id - Unique identifier of the user who created this record Example UUID PROVIDER Auto-generated - id - Legal entity who provides the data resource (owner). It is the affiliation of the author by default. Example UUID DATE Auto-generated - timestamp - Date of data resource registration. Example 10:45:13 CET 21/03/2021","title":"Administrative data"},{"location":"attributes/data/#description","text":"DATA_NAME Required - string - Name of the data resource. (The directory hierarchy in Nexus provides a fully qualified (FQ) name, which is unique.) Example CNSPiezoBolt#1 (in directory : factory 1 , machine1 , piezobolts) DATA_VERSION Optional - string - Version of this data resource entry (major.minor.patch). Defaults to 1.0.0 Example 2.3.4 DATA_DESC Optional - string - Human readable description of the data resource. Example This sensor measures temperature in Celsius, sends data via ConSenses edge device via an MQTT broker DATA_DESC_URL Optional - URL - More detailed specification of data source characteristics (doc, pdf, \u2026) Example data-source-specification-sheet.pdf DATA_SIZE Optional - integer - Estimated/exact size of data (e.g. file size, volume size, or message size); might be used to assess HW requirements (RAM, CPU) . In bytes (k - kilo, m - mega, t - tera, p - peta) Example 112m","title":"Description"},{"location":"attributes/data/#search-support","text":"DATA_TAGS Optional - list of strings - A list of tags freely added to help in searching/indexing (not limited to a basic set of tags, keywords) Example [ camera , rgb , w640 , h480 , jpg ]","title":"Search support"},{"location":"attributes/data/#datakind-specification","text":"DATA_KIND Required - enum - Type of the data resource (e.g. file/object storage, database management system, streaming broker). FILE can mean a single file or a folder. Example FILE , DATABASE , STREAM DATA_DIRECTION Required - enum - Direction of data flow (source: data provider, sink: data consumer/storage) Example SOURCE , SINK , BIDIRECTIONAL DATA_FORMAT Optional - list of strings - Format/encoding of the data produced or consumed by the data resource as a MIME type (IETF RFC 6838 https://www.sitepoint.com/mime-types-complete-list/). More than one can appear here (remote directory with several files). Example [ { application/json , text/plain , application/octet-stream , application/zip } ]","title":"Datakind specification"},{"location":"attributes/data/#data-access-specification","text":"DATA_STORE_TYPE Optional - string - The exact type of the data resource. Typically corresponds to the scheme part (scheme://) of DATA_URI. Example S3 , MYSQL , MQTT , ... (WP6 : DATA_SOURCE_TYPE=LOCAL, PATH=...\") DATA_URI Optional - URI - Accessibility of the data resource, including host, port information, protocol, and other fields (path is protocol dependent, can be a topic name). GUI may show host, port, path separately. Hidden at search. Format: scheme://host:port/path. Pseudo vars: DATA_PROTOCOL, DATA_HOST, DATA_PORT, DATA_PATH, DATA_QUERY, DATA_FRAGMENT. Example s3://amazonaws/bucket/object , kafka://host/topic#1 , ... DATA_AUTH Optional - list of enums - One or more authentication types that can be accepted by the storage resource. Example [ { none , userpass , accesskey_secretkey , ssl_certificate , tls_mutual , access_token , rclone_config } + ]","title":"Data access specification"},{"location":"attributes/data/#open-parameters","text":"DATA_CREDENTIALS Optional - OPEN - Credentials (e.g. string/json, zip, config file)","title":"Open parameters"},{"location":"attributes/data/#further-access-clauses-extensible","text":"DATA_PROTOCOL Optional - string - Protocol to use in communication with the data source, only if DATA_TYPE does not imply it (e.g. S3 over HTTP). Moved from to Data access specification. Note this is not necessarily the scheme part of the URI. Example HTTP, HTTPS, TCP, UDP DATA_MYSQL_DIALECT Optional - string - Protocol dialect to be used in communication with the database Example mysqldialect , mariadbdialect DATA_MQTT_PROTOCOL_VERSION Optional - string - MQTT protocol version must be used Example 3.1.1, 5.0 DATA_KAFKA_BROKER_VERSION Optional - string - Kafka broker version Example 2.7.0 DATA_S3_REGION Optional - string - S3 region Example eu-central-1","title":"Further access clauses (extensible)"},{"location":"attributes/data/#data-content-semantics","text":"DATA_SCHEMA Optional - string - Describes message internal structure, semantics, ontology. It can be any file (doc, rdf, owl, etc.). Asset Administration Shell, IEC 61360 - Common Data Dictionary, ... Example database schema description/contents DATA_SCHEMA_URL Optional - URL - No description available. Example database schema URL DATA_SCHEMA_ADDITIONAL_ATTRIBUTES Optional - string - Further restriction/specialization of DATA_SCHEMA, \u201cgeneral\u201d schema.","title":"Data content semantics"},{"location":"attributes/dataassetsmapping/","text":".md-content__button { display: none; } DataAssetsMapping Fields This information is also available in table format Available Fields The metadata specification for a DIGITbrain DataAssetsMapping has these sections: DataAssetsMapping This substructure is part of DMA Tuple DataAssetsMapping *MICROSERVICE_ID* Required - Map - The key(s) in this substructure are UUID string(s) corresponding to the ID(s) of the Microservice(s)making up the included Algorithm. The value for this key is a mapping of Data Sources to Data Assets. Example \"microservice_0db_uuid\" : { \"datasource_89d\" : \"data_9d8_uuid\" , \"datasource_dlo\" : \"data_aij_uuid\" } *DATA_SOURCE_ID* Required - UUID - Nested below each Microservice, these key(s) are the String identifier(s) of the Data Source(s) of each Microservice. The value for each key is the UUID of the Data Asset that corresponds to it. Example See above","title":"Data Assets Mapping"},{"location":"attributes/dataassetsmapping/#dataassetsmapping-fields","text":"This information is also available in table format","title":"DataAssetsMapping Fields"},{"location":"attributes/dataassetsmapping/#available-fields","text":"The metadata specification for a DIGITbrain DataAssetsMapping has these sections: DataAssetsMapping","title":"Available Fields"},{"location":"attributes/dataassetsmapping/#this-substructure-is-part-of-dma-tuple","text":"","title":"This substructure is part of DMA Tuple"},{"location":"attributes/dataassetsmapping/#dataassetsmapping","text":"*MICROSERVICE_ID* Required - Map - The key(s) in this substructure are UUID string(s) corresponding to the ID(s) of the Microservice(s)making up the included Algorithm. The value for this key is a mapping of Data Sources to Data Assets. Example \"microservice_0db_uuid\" : { \"datasource_89d\" : \"data_9d8_uuid\" , \"datasource_dlo\" : \"data_aij_uuid\" } *DATA_SOURCE_ID* Required - UUID - Nested below each Microservice, these key(s) are the String identifier(s) of the Data Source(s) of each Microservice. The value for each key is the UUID of the Data Asset that corresponds to it. Example See above","title":"DataAssetsMapping"},{"location":"attributes/deployment/","text":".md-content__button { display: none; } Deployment Fields This information is also available in table format Available Fields The metadata specification for a DIGITbrain Deployment has these sections: Description Deployments This substructure is part of DMA Tuple Description id Auto-generated - UUID - DIGITbrain reference name Required - String - Short name for the node/device author Required - String - Created by date Auto-generated - Date - Created on Deployments type Required - Enumeration {cloudbroker, edge} - computing centre cloudbroker Optional - Map of\u2026 - Configuration data for a CloudBroker instance deployment_id Optional - UUID - ID of CloudBroker Deployment instance_type_id Optional - UUID - ID of CloudBroker InstanceType key_pair_id Optional - UUID - ID of CloudBroker Key Pair opened_port Optional - String (comma separated integers) - Ports to open at cloud side endpoint Optional - URL - Endpoint of the CB Platform cloud_config Optional - String - cloud-init configuration for contextualisation of the VM Example #cloud-config\\nruncmd:\\n- [ sh, -xc, \\\"echo 'hello world!'\\\" ] edge Optional - Map of\u2026 - Connection data for a bring-your-own edge endpoint Optional - URL - accesible IP or FQDN of edge device","title":"Deployment"},{"location":"attributes/deployment/#deployment-fields","text":"This information is also available in table format","title":"Deployment Fields"},{"location":"attributes/deployment/#available-fields","text":"The metadata specification for a DIGITbrain Deployment has these sections: Description Deployments","title":"Available Fields"},{"location":"attributes/deployment/#this-substructure-is-part-of-dma-tuple","text":"","title":"This substructure is part of DMA Tuple"},{"location":"attributes/deployment/#description","text":"id Auto-generated - UUID - DIGITbrain reference name Required - String - Short name for the node/device author Required - String - Created by date Auto-generated - Date - Created on","title":"Description"},{"location":"attributes/deployment/#deployments","text":"type Required - Enumeration {cloudbroker, edge} - computing centre cloudbroker Optional - Map of\u2026 - Configuration data for a CloudBroker instance deployment_id Optional - UUID - ID of CloudBroker Deployment instance_type_id Optional - UUID - ID of CloudBroker InstanceType key_pair_id Optional - UUID - ID of CloudBroker Key Pair opened_port Optional - String (comma separated integers) - Ports to open at cloud side endpoint Optional - URL - Endpoint of the CB Platform cloud_config Optional - String - cloud-init configuration for contextualisation of the VM Example #cloud-config\\nruncmd:\\n- [ sh, -xc, \\\"echo 'hello world!'\\\" ] edge Optional - Map of\u2026 - Connection data for a bring-your-own edge endpoint Optional - URL - accesible IP or FQDN of edge device","title":"Deployments"},{"location":"attributes/dma_tuple/","text":".md-content__button { display: none; } DMA Tuple Fields This information is also available in table format Available Fields The metadata specification for a DIGITbrain DMA Tuple has these sections: Definition Definition ID Auto-generated - ID / URI - Unique identifier for the DMA Tuple Example 123e4567-e89b-12d3-a456-426614174000 Created at Auto-generated - ISO 8601 - Date of creation Example 2021-05-01T00:00:00Z Version Optional - Integer - Version number of the DMA Tuple Example 21 Author Auto-generated - ID / URI - Identifier of the Author of the MA Pair (NB: Entity for author is referenced) Example person_123e4567-e89b-12d3 (auto) Licensor Auto-generated - ID / URI - Identifier of the Legal Entity licensing the the MA Pair (NB: Entity for Licensor is referenced) Example legal_entity_123e4567-e89b-12d3 (auto) Derivation Auto-generated - IDs / URIs - In case of derivation, references to parent / child (optional) Example dma_tuple_123e4567-e89b-12d3 (auto) Name Optional - Text - Short name to identify the DMA Tuple Example Pressure drop for the injection in hall 3 Scope Optional - Text - Short description of the scope of the DMA Tuple (human readable) Example Effectiveness of the mold closing process IP Instance Optional - ID / URI - Identifier of the IP Instance the DMA Tuple is valid for (NB: Entity for IP Instance is referenced) Example ip_instance_123e4567-e89b-12d3 Namespace Optional - ID / URI? - Context to interpret the associated information (optional?) Example namespace_123e4567-e89b-12d3 MA Pair Optional - ID / URI - Identifier of the MA Pair associated to the DMA Tuple Example ma_pair_123e4567-e89b-12d3 DataAssetsMapping Optional - DataAssetsMapping - Mapping the available Data assets in this DMA Tuple to available Microservices. Required if Data assets are required. Not all microservices need a Data asset. Deployments Optional - Deployment - Characteristics of the Deployment (i.e. Cloud or Edge infrastructure) for every Microservice associated to the DMA Tuple Schedule Optional - Dates - Days and hours the DMA Tuple will be active (optional) Example R90/2021-05-01T00:00:00Z/PT48H Payload Optional - String - User-defined key-value pairs: JSON string with additional information (optional) Example { \u2018injectionMold\u2019 : \u2018Circuit Case\u2019 }","title":"DMA Tuple"},{"location":"attributes/dma_tuple/#dma-tuple-fields","text":"This information is also available in table format","title":"DMA Tuple Fields"},{"location":"attributes/dma_tuple/#available-fields","text":"The metadata specification for a DIGITbrain DMA Tuple has these sections: Definition","title":"Available Fields"},{"location":"attributes/dma_tuple/#definition","text":"ID Auto-generated - ID / URI - Unique identifier for the DMA Tuple Example 123e4567-e89b-12d3-a456-426614174000 Created at Auto-generated - ISO 8601 - Date of creation Example 2021-05-01T00:00:00Z Version Optional - Integer - Version number of the DMA Tuple Example 21 Author Auto-generated - ID / URI - Identifier of the Author of the MA Pair (NB: Entity for author is referenced) Example person_123e4567-e89b-12d3 (auto) Licensor Auto-generated - ID / URI - Identifier of the Legal Entity licensing the the MA Pair (NB: Entity for Licensor is referenced) Example legal_entity_123e4567-e89b-12d3 (auto) Derivation Auto-generated - IDs / URIs - In case of derivation, references to parent / child (optional) Example dma_tuple_123e4567-e89b-12d3 (auto) Name Optional - Text - Short name to identify the DMA Tuple Example Pressure drop for the injection in hall 3 Scope Optional - Text - Short description of the scope of the DMA Tuple (human readable) Example Effectiveness of the mold closing process IP Instance Optional - ID / URI - Identifier of the IP Instance the DMA Tuple is valid for (NB: Entity for IP Instance is referenced) Example ip_instance_123e4567-e89b-12d3 Namespace Optional - ID / URI? - Context to interpret the associated information (optional?) Example namespace_123e4567-e89b-12d3 MA Pair Optional - ID / URI - Identifier of the MA Pair associated to the DMA Tuple Example ma_pair_123e4567-e89b-12d3 DataAssetsMapping Optional - DataAssetsMapping - Mapping the available Data assets in this DMA Tuple to available Microservices. Required if Data assets are required. Not all microservices need a Data asset. Deployments Optional - Deployment - Characteristics of the Deployment (i.e. Cloud or Edge infrastructure) for every Microservice associated to the DMA Tuple Schedule Optional - Dates - Days and hours the DMA Tuple will be active (optional) Example R90/2021-05-01T00:00:00Z/PT48H Payload Optional - String - User-defined key-value pairs: JSON string with additional information (optional) Example { \u2018injectionMold\u2019 : \u2018Circuit Case\u2019 }","title":"Definition"},{"location":"attributes/ma_pair/","text":".md-content__button { display: none; } MA Pair Fields This information is also available in table format Available Fields The metadata specification for a DIGITbrain MA Pair has these sections: Definition Definition ID Auto-generated - UUID - Unique identifier for the MA Pair Example 123e4567-e89b-12d3-a456-426614174000 Created at Auto-generated - ISO 8601 - Date of creation Example 2021-05-01T00:00:00Z Version Optional - Integer - Version number of the MA Pair Example 21 Author Auto-generated - UUID - Identifier of the Author of the MA Pair (NB: Entity for author is referenced) Example person_123e4567-e89b-12d3 (auto) Licensor Auto-generated - UUID - Identifier of the Legal Entity licensing the MA Pair (NB: Entity for Licensor is referenced) Example legal_entity_123e4567-e89b-12d3 (auto) Derivation Auto-generated - UUID - In case of derivation, references to parent / child (optional) Example ma_pair_123e4567-e89b-12d3 (auto) Name Optional - Text - Short name to identify the MA Pair Example Pressure drop Scope Optional - Text - Short description of the scope of the MA Pair (human readable) Example Effectiveness of the mold closing process IP Family Optional - UUID - Identifier of the IP Family the MA Pair is valid for Example ip_family_123e4567-e89b-12d3 Namespace Optional - UUID? - Context to interpret the associated information (optional?) Example namespace_123e4567-e89b-12d3 M Asset Optional - UUID - Identifier of the Model Asset associated to the MA Pair (NB: The corresponding model file is indicated in Model metadata (first tab) as Model_URI and the corresponding zip file needs to be served to the Algorithm to evaluate the Model by the Microservice (MODEL_FILENAME)) Example model_123e4567-e89b-12d3 A Asset Optional - UUID - Identifiers of the Algorithm Asset associated to the MA Pair Example algorithm_123e4567-e89b-12d3 Rules Optional - UUIDs - References to recommended Rules to be verified per Evaluation of the MA Pair Example rules_123e4567-e89b-12d3 Frequency Optional - Integer - Recommended number of evaluations conducted per hour for the MA Pair (optional) Example 12 Payload Optional - String - User-defined key-value pairs: JSON string with additional information (optional) Example { \u2018minPressure\u2019 : 90 , \u2018maxPressure\u2019 : 120 }","title":"MA Pair"},{"location":"attributes/ma_pair/#ma-pair-fields","text":"This information is also available in table format","title":"MA Pair Fields"},{"location":"attributes/ma_pair/#available-fields","text":"The metadata specification for a DIGITbrain MA Pair has these sections: Definition","title":"Available Fields"},{"location":"attributes/ma_pair/#definition","text":"ID Auto-generated - UUID - Unique identifier for the MA Pair Example 123e4567-e89b-12d3-a456-426614174000 Created at Auto-generated - ISO 8601 - Date of creation Example 2021-05-01T00:00:00Z Version Optional - Integer - Version number of the MA Pair Example 21 Author Auto-generated - UUID - Identifier of the Author of the MA Pair (NB: Entity for author is referenced) Example person_123e4567-e89b-12d3 (auto) Licensor Auto-generated - UUID - Identifier of the Legal Entity licensing the MA Pair (NB: Entity for Licensor is referenced) Example legal_entity_123e4567-e89b-12d3 (auto) Derivation Auto-generated - UUID - In case of derivation, references to parent / child (optional) Example ma_pair_123e4567-e89b-12d3 (auto) Name Optional - Text - Short name to identify the MA Pair Example Pressure drop Scope Optional - Text - Short description of the scope of the MA Pair (human readable) Example Effectiveness of the mold closing process IP Family Optional - UUID - Identifier of the IP Family the MA Pair is valid for Example ip_family_123e4567-e89b-12d3 Namespace Optional - UUID? - Context to interpret the associated information (optional?) Example namespace_123e4567-e89b-12d3 M Asset Optional - UUID - Identifier of the Model Asset associated to the MA Pair (NB: The corresponding model file is indicated in Model metadata (first tab) as Model_URI and the corresponding zip file needs to be served to the Algorithm to evaluate the Model by the Microservice (MODEL_FILENAME)) Example model_123e4567-e89b-12d3 A Asset Optional - UUID - Identifiers of the Algorithm Asset associated to the MA Pair Example algorithm_123e4567-e89b-12d3 Rules Optional - UUIDs - References to recommended Rules to be verified per Evaluation of the MA Pair Example rules_123e4567-e89b-12d3 Frequency Optional - Integer - Recommended number of evaluations conducted per hour for the MA Pair (optional) Example 12 Payload Optional - String - User-defined key-value pairs: JSON string with additional information (optional) Example { \u2018minPressure\u2019 : 90 , \u2018maxPressure\u2019 : 120 }","title":"Definition"},{"location":"attributes/microservice/","text":".md-content__button { display: none; } Microservice Fields This information is also available in table format Available Fields The metadata specification for a DIGITbrain Microservice has these sections: Description Service Hardware Requirements OS Requirements Input Data(WP4) Output Data (WP4) Model(WP5) Parameters Metrics Description id Auto-generated - String - unique DIGITbrain reference Example microservice_12312124 name Required - String - human readable short, yet descriptive name of the Microservice Example Object Detection for faulty parts author Required - String - name of the authoring entity Example DFKI date Auto-generated - Date - creation date Example 06.04.2021 version Required - String - version Example 1.0 description Required - String - human readable short description of the Microservice's capabilities Example This microservices solves a certain problem using very specific methods... classificationSchema Required - Enumeration { Simulation, ML, others } - fine-granular classification of the Microservice Example other type Required - List( String) - detailed type of the microservice, list of keywords Example { neural network , deep learning , convolutional neural network , CNN } Service deploymentFormat Required - Enumeration {docker-compose, kubernetes-manifest} - identifier of the deployment environment required to deploy the Microservice's container Example docker-compose deploymentData Required - JSON - JSON of docker-compose or kubernetes manifest required to run the container Example See https://github.com/UoW-CPC/ADTGenerator/blob/main/examples/metadata_microservice.json#L30 configurationData Optional - List(Map) - configuration file(s) required by the service Example https://github.com/UoW-CPC/ADTGenerator/blob/main/examples/metadata_RISTRA.json#L101 filePath Optional - String - full path to file including file name Example /data/rclone.conf fileContent Optional - String - file content (not binary) Example [ s3-server ] \\n access_key : 123abc mountPropagation Optional - boolean - Enable mountPropagation https://kubernetes.io/docs/concepts/storage/volumes/#mount-propagation . Default: False Example True mountedInputDirectories Optional - List(String) - A note for developers of co-operating Microservices. A list of directories that should be shared to the host by where this microservice can find required inputs Example [ \"/data\" , \"/cfg\" ] mountedOutputDirectories Optional - List(String) - A note for developers of co-operating Microservices. A list of directories that are shared on the host where this microservice will store its outputs Example [ \"/data_out\" , \"/results\" ] Hardware Requirements recommendedNumberOfGPUs Optional - Int - recommended number of GPUs Example 2 minimumNumberOfGPUs Optional - Int - minimum required number of GPUs Example 1 recommendedGPURAM Optional - Int - recommended amount of GPU memory in GB Example 6 minimumGPURAM Optional - Int - minimum required amount of GPU memory in GB Example 1 gpuType Optional - String - a description of the type of GPUs, and further specifications, to allow the execution of the Microservice Example NVidia (compute capability >= 7.0) hpcRequired Optional - Bool - whether this Microservice requires an HPC environment to be executed efficiently Example true edgeType Optional - Enumeration {TPU (Google), NPU (Qualcomm), FPGA, NVIDIA Jetson AGX} - required type of edge device to allow the execution of the Microservice Example NVIDIA Jetson AGX recommendedRAM Optional - String - recommended amount of memory in GB Example 16 minimumRAM Optional - String - minimum required amount memory in GB Example 2 recommendedCPUs Optional - Int - recommended number of CPU cores Example 4 minimumCPUs Optional - Int - minimum required number of CPU cores Example 2 requiredDiskSpace Optional - Int - required amount of disk space in GB Example 42 OS Requirements osArch Required - String - supported os architecture Example x86_64 osType Optional - String - supported os type Example linux osDistribution Optional - String - supported os distribution Example ubuntu osVersion Optional - String - description of supported os version Example 20.04 Input Data(WP4) inputData Optional - List( Data Objects) - list of Data objects for each required input, specified using the \"DATA\" fields listed below Example {{ DATA_KIND = { FILE , STREAM }, DATA_DIRECTION = { SOURCE }} input_id Required - String - human-readable identifier, unique within a Microservice Example file1 DATA_KIND Required - List( DATA_KIND) - supported types of the data resource (e.g. file/object storage, database management system, streaming broker). FILE can mean a single file or a folder. Example { FILE , STREAM } DATA_DIRECTION Required - List( DATA_DIRECTION) - supported direction of data flow (source: data provider, sink: data consumer/storage) Example { SINK , BIDIRECTIONAL } DATA_FORMAT Optional - List( DATA_FORMAT) - supported format/encoding of the data produced or consumed by the data resource as a MIME type (IETF RFC 6838 https://www.sitepoint.com/mime-types-complete-list/). More than one can appear here (remote directory with several files). Example { application/zip , image/jpg } DATA_SOURCE_TYPE Optional - List( DATA_SOURCE_TYPE) - supported exact type of the data resource. Typically corresponds to the scheme part (protocol://) of DATA_URI Example { MYSQL , KAFKA } DATA_PROTOCOL Optional - List( DATA_PROTOCOL) - supported protocols Example { HTTP } DATA_AUTH_TYPE Optional - List( DATA_AUTH_TYPE) - supported authentication type Example { tls_mutual , userpass } DATA_MYSQL_DIALECT Optional - List( DATA_MYSQL_DIALECT) - supported MYSQL dialect Example { mariadbdialect } DATA_MQTT_PROTOCOL_VERSION Optional - List( DATA_MQTT_PROTOCOL_VERSION) - supported MQTT protocol version Example { 2.3.1 } DATA_KAFKA_BROKER_VERSION Optional - List( DATA_KAFKA_BROKER_VERSION) - supported Kafka broker version Example { 2.7.1 , 2.5 } DATA_S3_REGION Optional - List( DATA_S3_REGION) - supported S3 region Example { eu-central-1 } DATA_SCHEMA Optional - List( DATA_SCHEMA) - supported internal message structure, semantics, ontology. It can be any file (doc, rdf, owl, etc.). Asset Administration Shell, IEC 61360 - Common Data Dictionary, \u2026 Example { jpg } Output Data (WP4) outputData Optional - List( Data Objects) - list of Data objects for each generated output, specified using the \"DATA\" fields listed below Example {{ DATA_KIND = { FILE , STREAM }, DATA_DIRECTION = { SINK }} output_id Required - String - human-readable identifier, unique within a Microservice Example file1 DATA_KIND Required - List( DATA_KIND) - supported types of the data resource (e.g. file/object storage, database management system, streaming broker). FILE can mean a single file or a folder. Example { FILE , STREAM } DATA_DIRECTION Required - List( DATA_DIRECTION) - supported direction of data flow (source: data provider, sink: data consumer/storage) Example { SINK , BIDIRECTIONAL } DATA_FORMAT Optional - List( DATA_FORMAT) - supported format/encoding of the data produced or consumed by the data resource as a MIME type (IETF RFC 6838 https://www.sitepoint.com/mime-types-complete-list/). More than one can appear here (remote directory with several files) Example { application/zip , image/jpg } DATA_SOURCE_TYPE Optional - List( DATA_SOURCE_TYPE) - supported exact type of the data resource. Typically corresponds to the scheme part (protocol://) of DATA_URI. Example { MYSQL , KAFKA } DATA_PROTOCOL Optional - List( DATA_PROTOCOL) - supported protocols Example { HTTP } DATA_AUTH_TYPE Optional - List( DATA_AUTH_TYPE) - supported authentication type Example { tls_mutual , userpass } DATA_MYSQL_DIALECT Optional - List( DATA_MYSQL_DIALECT) - supported MYSQL dialect, for each generated output Example { mariadbdialect } DATA_MQTT_PROTOCOL_VERSION Optional - List( DATA_MQTT_PROTOCOL_VERSION) - supported MQTT protocol version Example { 2.3.1 } DATA_KAFKA_BROKER_VERSION Optional - List( DATA_KAFKA_BROKER_VERSION) - supported Kafka broker version Example { 2.7.1 , 2.5 } DATA_S3_REGION Optional - List( DATA_S3_REGION) - supported S3 region Example { eu-central-1 } DATA_SCHEMA Optional - List( DATA_SCHEMA) - supported internal message structure, semantics, ontology. It can be any file (doc, rdf, owl, etc.). Asset Administration Shell, IEC 61360 - Common Data Dictionary, \u2026 Example { jpg } Model(WP5) model_types Optional - List( ModelTypes) - list of supported Model types Example { SavedModel (Tensorflow) } model_recommendedAuthTools Optional - List (AuthTools) - list of recommended AuthoringTools used to generate the Model Example { PreSTRA } Parameters parameters Optional - List( Parameter) - list of Parameter objects for each possible parameters, to be specified before deployment name Required - String - short name for this parameter (should be unique across the Microservice\u2019s parameters) Example detection_threshold type Required - Enumeration (xsd datatypes) - expected input type (may be used to verify the input) Example Integer mandatory Optional - Boolean - whether this parameter is mandatory (default: false) Example true defaultValue Optional - has to match \"type\" - a default value, if the parameter is required but not provided Example 42 description Required - String - short description of the parameter and its possible values Example This parameter can be used to configure the included algorithm in a certain way, possible values : \"A\" , \"B\" , \"Z\" Metrics metrics Optional - List( Metrics) - list of Metric objects for each metric collected by the Microservice name Required - String - short name (should be unique across the Microservice's metrics) Example meanTemperature correspondingMeasurement Required - String - identification of the corresponding measurement, i.e. output of the Model Example temperature1 function Required - String - short description of the mathematical approach used to derive this value Example arithmetic mean unit Required - String - the unit of the metric measurement Example degree celsius description Required - String - short description of the metric measurement Example This metric describes the arithmetic mean of the approximated temperatures of the fabricated part when it leaves station 4.","title":"Microservice"},{"location":"attributes/microservice/#microservice-fields","text":"This information is also available in table format","title":"Microservice Fields"},{"location":"attributes/microservice/#available-fields","text":"The metadata specification for a DIGITbrain Microservice has these sections: Description Service Hardware Requirements OS Requirements Input Data(WP4) Output Data (WP4) Model(WP5) Parameters Metrics","title":"Available Fields"},{"location":"attributes/microservice/#description_1","text":"id Auto-generated - String - unique DIGITbrain reference Example microservice_12312124 name Required - String - human readable short, yet descriptive name of the Microservice Example Object Detection for faulty parts author Required - String - name of the authoring entity Example DFKI date Auto-generated - Date - creation date Example 06.04.2021 version Required - String - version Example 1.0 description Required - String - human readable short description of the Microservice's capabilities Example This microservices solves a certain problem using very specific methods... classificationSchema Required - Enumeration { Simulation, ML, others } - fine-granular classification of the Microservice Example other type Required - List( String) - detailed type of the microservice, list of keywords Example { neural network , deep learning , convolutional neural network , CNN }","title":"Description"},{"location":"attributes/microservice/#service","text":"deploymentFormat Required - Enumeration {docker-compose, kubernetes-manifest} - identifier of the deployment environment required to deploy the Microservice's container Example docker-compose deploymentData Required - JSON - JSON of docker-compose or kubernetes manifest required to run the container Example See https://github.com/UoW-CPC/ADTGenerator/blob/main/examples/metadata_microservice.json#L30 configurationData Optional - List(Map) - configuration file(s) required by the service Example https://github.com/UoW-CPC/ADTGenerator/blob/main/examples/metadata_RISTRA.json#L101 filePath Optional - String - full path to file including file name Example /data/rclone.conf fileContent Optional - String - file content (not binary) Example [ s3-server ] \\n access_key : 123abc mountPropagation Optional - boolean - Enable mountPropagation https://kubernetes.io/docs/concepts/storage/volumes/#mount-propagation . Default: False Example True mountedInputDirectories Optional - List(String) - A note for developers of co-operating Microservices. A list of directories that should be shared to the host by where this microservice can find required inputs Example [ \"/data\" , \"/cfg\" ] mountedOutputDirectories Optional - List(String) - A note for developers of co-operating Microservices. A list of directories that are shared on the host where this microservice will store its outputs Example [ \"/data_out\" , \"/results\" ]","title":"Service"},{"location":"attributes/microservice/#hardware-requirements","text":"recommendedNumberOfGPUs Optional - Int - recommended number of GPUs Example 2 minimumNumberOfGPUs Optional - Int - minimum required number of GPUs Example 1 recommendedGPURAM Optional - Int - recommended amount of GPU memory in GB Example 6 minimumGPURAM Optional - Int - minimum required amount of GPU memory in GB Example 1 gpuType Optional - String - a description of the type of GPUs, and further specifications, to allow the execution of the Microservice Example NVidia (compute capability >= 7.0) hpcRequired Optional - Bool - whether this Microservice requires an HPC environment to be executed efficiently Example true edgeType Optional - Enumeration {TPU (Google), NPU (Qualcomm), FPGA, NVIDIA Jetson AGX} - required type of edge device to allow the execution of the Microservice Example NVIDIA Jetson AGX recommendedRAM Optional - String - recommended amount of memory in GB Example 16 minimumRAM Optional - String - minimum required amount memory in GB Example 2 recommendedCPUs Optional - Int - recommended number of CPU cores Example 4 minimumCPUs Optional - Int - minimum required number of CPU cores Example 2 requiredDiskSpace Optional - Int - required amount of disk space in GB Example 42","title":"Hardware Requirements"},{"location":"attributes/microservice/#os-requirements","text":"osArch Required - String - supported os architecture Example x86_64 osType Optional - String - supported os type Example linux osDistribution Optional - String - supported os distribution Example ubuntu osVersion Optional - String - description of supported os version Example 20.04","title":"OS Requirements"},{"location":"attributes/microservice/#input-datawp4","text":"inputData Optional - List( Data Objects) - list of Data objects for each required input, specified using the \"DATA\" fields listed below Example {{ DATA_KIND = { FILE , STREAM }, DATA_DIRECTION = { SOURCE }} input_id Required - String - human-readable identifier, unique within a Microservice Example file1 DATA_KIND Required - List( DATA_KIND) - supported types of the data resource (e.g. file/object storage, database management system, streaming broker). FILE can mean a single file or a folder. Example { FILE , STREAM } DATA_DIRECTION Required - List( DATA_DIRECTION) - supported direction of data flow (source: data provider, sink: data consumer/storage) Example { SINK , BIDIRECTIONAL } DATA_FORMAT Optional - List( DATA_FORMAT) - supported format/encoding of the data produced or consumed by the data resource as a MIME type (IETF RFC 6838 https://www.sitepoint.com/mime-types-complete-list/). More than one can appear here (remote directory with several files). Example { application/zip , image/jpg } DATA_SOURCE_TYPE Optional - List( DATA_SOURCE_TYPE) - supported exact type of the data resource. Typically corresponds to the scheme part (protocol://) of DATA_URI Example { MYSQL , KAFKA } DATA_PROTOCOL Optional - List( DATA_PROTOCOL) - supported protocols Example { HTTP } DATA_AUTH_TYPE Optional - List( DATA_AUTH_TYPE) - supported authentication type Example { tls_mutual , userpass } DATA_MYSQL_DIALECT Optional - List( DATA_MYSQL_DIALECT) - supported MYSQL dialect Example { mariadbdialect } DATA_MQTT_PROTOCOL_VERSION Optional - List( DATA_MQTT_PROTOCOL_VERSION) - supported MQTT protocol version Example { 2.3.1 } DATA_KAFKA_BROKER_VERSION Optional - List( DATA_KAFKA_BROKER_VERSION) - supported Kafka broker version Example { 2.7.1 , 2.5 } DATA_S3_REGION Optional - List( DATA_S3_REGION) - supported S3 region Example { eu-central-1 } DATA_SCHEMA Optional - List( DATA_SCHEMA) - supported internal message structure, semantics, ontology. It can be any file (doc, rdf, owl, etc.). Asset Administration Shell, IEC 61360 - Common Data Dictionary, \u2026 Example { jpg }","title":"Input Data(WP4)"},{"location":"attributes/microservice/#output-data-wp4","text":"outputData Optional - List( Data Objects) - list of Data objects for each generated output, specified using the \"DATA\" fields listed below Example {{ DATA_KIND = { FILE , STREAM }, DATA_DIRECTION = { SINK }} output_id Required - String - human-readable identifier, unique within a Microservice Example file1 DATA_KIND Required - List( DATA_KIND) - supported types of the data resource (e.g. file/object storage, database management system, streaming broker). FILE can mean a single file or a folder. Example { FILE , STREAM } DATA_DIRECTION Required - List( DATA_DIRECTION) - supported direction of data flow (source: data provider, sink: data consumer/storage) Example { SINK , BIDIRECTIONAL } DATA_FORMAT Optional - List( DATA_FORMAT) - supported format/encoding of the data produced or consumed by the data resource as a MIME type (IETF RFC 6838 https://www.sitepoint.com/mime-types-complete-list/). More than one can appear here (remote directory with several files) Example { application/zip , image/jpg } DATA_SOURCE_TYPE Optional - List( DATA_SOURCE_TYPE) - supported exact type of the data resource. Typically corresponds to the scheme part (protocol://) of DATA_URI. Example { MYSQL , KAFKA } DATA_PROTOCOL Optional - List( DATA_PROTOCOL) - supported protocols Example { HTTP } DATA_AUTH_TYPE Optional - List( DATA_AUTH_TYPE) - supported authentication type Example { tls_mutual , userpass } DATA_MYSQL_DIALECT Optional - List( DATA_MYSQL_DIALECT) - supported MYSQL dialect, for each generated output Example { mariadbdialect } DATA_MQTT_PROTOCOL_VERSION Optional - List( DATA_MQTT_PROTOCOL_VERSION) - supported MQTT protocol version Example { 2.3.1 } DATA_KAFKA_BROKER_VERSION Optional - List( DATA_KAFKA_BROKER_VERSION) - supported Kafka broker version Example { 2.7.1 , 2.5 } DATA_S3_REGION Optional - List( DATA_S3_REGION) - supported S3 region Example { eu-central-1 } DATA_SCHEMA Optional - List( DATA_SCHEMA) - supported internal message structure, semantics, ontology. It can be any file (doc, rdf, owl, etc.). Asset Administration Shell, IEC 61360 - Common Data Dictionary, \u2026 Example { jpg }","title":"Output Data (WP4)"},{"location":"attributes/microservice/#modelwp5","text":"model_types Optional - List( ModelTypes) - list of supported Model types Example { SavedModel (Tensorflow) } model_recommendedAuthTools Optional - List (AuthTools) - list of recommended AuthoringTools used to generate the Model Example { PreSTRA }","title":"Model(WP5)"},{"location":"attributes/microservice/#parameters_1","text":"parameters Optional - List( Parameter) - list of Parameter objects for each possible parameters, to be specified before deployment name Required - String - short name for this parameter (should be unique across the Microservice\u2019s parameters) Example detection_threshold type Required - Enumeration (xsd datatypes) - expected input type (may be used to verify the input) Example Integer mandatory Optional - Boolean - whether this parameter is mandatory (default: false) Example true defaultValue Optional - has to match \"type\" - a default value, if the parameter is required but not provided Example 42 description Required - String - short description of the parameter and its possible values Example This parameter can be used to configure the included algorithm in a certain way, possible values : \"A\" , \"B\" , \"Z\"","title":"Parameters"},{"location":"attributes/microservice/#metrics_1","text":"metrics Optional - List( Metrics) - list of Metric objects for each metric collected by the Microservice name Required - String - short name (should be unique across the Microservice's metrics) Example meanTemperature correspondingMeasurement Required - String - identification of the corresponding measurement, i.e. output of the Model Example temperature1 function Required - String - short description of the mathematical approach used to derive this value Example arithmetic mean unit Required - String - the unit of the metric measurement Example degree celsius description Required - String - short description of the metric measurement Example This metric describes the arithmetic mean of the approximated temperatures of the fabricated part when it leaves station 4.","title":"Metrics"},{"location":"attributes/model/","text":".md-content__button { display: none; } Model Fields This information is also available in table format Available Fields The metadata specification for a DIGITbrain Model has these sections: Description Parameters Dependant FMUs OS Requirements Hardware Requirements Publishing Description ID Auto-generated - UUID - Internal DigitBrain reference (automatically generated) Name Optional - string - Name of the model Version Optional - semver - Version of the model. If model only has revisions, use semver prerelease 0.1, 0.2, etc. License Optional - enum - License of the model. Type tbd in SAD group Provider Optional - string - Provider name: Institution or Person Provider_contacts Optional - obj - Dictionary with keys being phone, email, address - Type takes into account co-simulation models, for which solver info is mandatory (next slide) AuthTool Optional - enum - Authoring Tool used to create the model Type Optional - enum - ML, LCA, 3D FEM and CFD, System simulation, discrete event simulation, co-simulation (it couples a model with specific algorithms) - The original term Path was proposed to be changed (SAD) Fidelity Optional - number - Error of the model\u2019s prediction REPOSITORY_URI Required - URI - Where the model file is stored (usually the DigitBrain certified external model repository). The path and model filename are not provided via this field. Example https://www.myrepo.com PATH Required - string - Path to the model file in the specified repository, not including the filename itself. Example input/models FILENAME Required - string - Name of the model file at the given path within the given repo, with a file extension if it exists. Example mymodel.pb State_depend Optional - bool - stateful -> 1, stateless -> 0 Parameters In-slots Optional - array of obj - Values on which the model is evaluated (or parameters that might set before or during the evaluation) - Inputs and parameters together, although if needed we can still differentiate them internally in key field for each specific model. Key Optional - string - Group key (eg. type and name) of the in-slot Name Optional - string - Human-readable name of the in-slot Dimensions Optional - number - Number of dimensions of the in-slot (i.e. scalar, vector field) Is-continuous Optional - boolean - continuous or discreet in-slot Units Optional - obj (see subkeys below) - Values related to the in-slot measurement units Units.Unit Optional - string - Units of the in-slot (e.g Pa, m/s, etc\u2026) Units.Exponent Optional - array of number - eg. exponents for kg (SI) {1, -2, 0, 0, 0, 0, 1} Units.Offset Optional - number - scale offset if needed (e.g. K to C conversion) Units.Scale Optional - number - Order of magnitude of the measurement unit scale e.g. Scale is equal to 10^-3 for values expressed in mm Default-value Optional - number - Default value for the in-slot Ranges Optional - array of number - Max and min value of the in-slot Outputs Optional - array of obj - Values that the model approximates Key Optional - string - Group key (eg. type and name) of the output Name Optional - string - Human-readable name of the output Dimensions Optional - number - Number of dimensions of the output (i.e. scalar, vector field) Is-continuous Optional - boolean - Continuous or discreet output Units Optional - obj (see subkeys below) - Values related to the output measurement units Units.Unit Optional - string - Units of the output (e.g Pa, m/s, etc\u2026) Units.Exponent Optional - array of number - eg. exponents for kg (SI) {1, -2, 0, 0, 0, 0, 1} Units.Offset Optional - number - scale offset if needed (e.g. K to C conversion) Units.Scale Optional - number - Order of magnitude of the measurement unit scale e.g. Scale is equal to 10^-3 for values expressed in mm Default-value Optional - number - Default value for the output Ranges Optional - array of number - Max and min value of the output CosimSolverInfo Optional - obj - For co-simulation Type only Dependant FMUs Dependencies Optional - array of URI - Dependant FMUs for co-simulation OS Requirements osArch Optional - enum - OS architecture type (e.g. x86_64) osType Optional - enum - OS type (e.g. Windows, Linux) osDistribution Optional - enum - OS distributun (e.g. Ubuntu, Fedora) Hardware Requirements recommendedNumberOfGPUCores Optional - number - Recommended number of GPU cores minimumNumberOfGPUCores Optional - number - Minimum required number of GPU cores recommendedGPURAM Optional - number - Recommended GPU memory minimumGPURAM Optional - number - Minimum required GPU memory recommendedRAM Optional - number - Recommended Memory minimumRAM Optional - number - Minimum required memory recommendedCPUs Optional - number - Recommended number of CPU cores minimumCPUs Optional - number - Minimum required number of CPU cores requiredDiskSpace Optional - number - Required amount of disk space in GB Publishing Description Optional - string - Model tag description Additional info about model files (e.g. versioning, scope, i.e. what is the model used for, e.g. simulation, control, etc.) - Human readable marketplace description","title":"Model"},{"location":"attributes/model/#model-fields","text":"This information is also available in table format","title":"Model Fields"},{"location":"attributes/model/#available-fields","text":"The metadata specification for a DIGITbrain Model has these sections: Description Parameters Dependant FMUs OS Requirements Hardware Requirements Publishing","title":"Available Fields"},{"location":"attributes/model/#description_1","text":"ID Auto-generated - UUID - Internal DigitBrain reference (automatically generated) Name Optional - string - Name of the model Version Optional - semver - Version of the model. If model only has revisions, use semver prerelease 0.1, 0.2, etc. License Optional - enum - License of the model. Type tbd in SAD group Provider Optional - string - Provider name: Institution or Person Provider_contacts Optional - obj - Dictionary with keys being phone, email, address - Type takes into account co-simulation models, for which solver info is mandatory (next slide) AuthTool Optional - enum - Authoring Tool used to create the model Type Optional - enum - ML, LCA, 3D FEM and CFD, System simulation, discrete event simulation, co-simulation (it couples a model with specific algorithms) - The original term Path was proposed to be changed (SAD) Fidelity Optional - number - Error of the model\u2019s prediction REPOSITORY_URI Required - URI - Where the model file is stored (usually the DigitBrain certified external model repository). The path and model filename are not provided via this field. Example https://www.myrepo.com PATH Required - string - Path to the model file in the specified repository, not including the filename itself. Example input/models FILENAME Required - string - Name of the model file at the given path within the given repo, with a file extension if it exists. Example mymodel.pb State_depend Optional - bool - stateful -> 1, stateless -> 0","title":"Description"},{"location":"attributes/model/#parameters","text":"In-slots Optional - array of obj - Values on which the model is evaluated (or parameters that might set before or during the evaluation) - Inputs and parameters together, although if needed we can still differentiate them internally in key field for each specific model. Key Optional - string - Group key (eg. type and name) of the in-slot Name Optional - string - Human-readable name of the in-slot Dimensions Optional - number - Number of dimensions of the in-slot (i.e. scalar, vector field) Is-continuous Optional - boolean - continuous or discreet in-slot Units Optional - obj (see subkeys below) - Values related to the in-slot measurement units Units.Unit Optional - string - Units of the in-slot (e.g Pa, m/s, etc\u2026) Units.Exponent Optional - array of number - eg. exponents for kg (SI) {1, -2, 0, 0, 0, 0, 1} Units.Offset Optional - number - scale offset if needed (e.g. K to C conversion) Units.Scale Optional - number - Order of magnitude of the measurement unit scale e.g. Scale is equal to 10^-3 for values expressed in mm Default-value Optional - number - Default value for the in-slot Ranges Optional - array of number - Max and min value of the in-slot Outputs Optional - array of obj - Values that the model approximates Key Optional - string - Group key (eg. type and name) of the output Name Optional - string - Human-readable name of the output Dimensions Optional - number - Number of dimensions of the output (i.e. scalar, vector field) Is-continuous Optional - boolean - Continuous or discreet output Units Optional - obj (see subkeys below) - Values related to the output measurement units Units.Unit Optional - string - Units of the output (e.g Pa, m/s, etc\u2026) Units.Exponent Optional - array of number - eg. exponents for kg (SI) {1, -2, 0, 0, 0, 0, 1} Units.Offset Optional - number - scale offset if needed (e.g. K to C conversion) Units.Scale Optional - number - Order of magnitude of the measurement unit scale e.g. Scale is equal to 10^-3 for values expressed in mm Default-value Optional - number - Default value for the output Ranges Optional - array of number - Max and min value of the output CosimSolverInfo Optional - obj - For co-simulation Type only","title":"Parameters"},{"location":"attributes/model/#dependant-fmus","text":"Dependencies Optional - array of URI - Dependant FMUs for co-simulation","title":"Dependant FMUs"},{"location":"attributes/model/#os-requirements","text":"osArch Optional - enum - OS architecture type (e.g. x86_64) osType Optional - enum - OS type (e.g. Windows, Linux) osDistribution Optional - enum - OS distributun (e.g. Ubuntu, Fedora)","title":"OS Requirements"},{"location":"attributes/model/#hardware-requirements","text":"recommendedNumberOfGPUCores Optional - number - Recommended number of GPU cores minimumNumberOfGPUCores Optional - number - Minimum required number of GPU cores recommendedGPURAM Optional - number - Recommended GPU memory minimumGPURAM Optional - number - Minimum required GPU memory recommendedRAM Optional - number - Recommended Memory minimumRAM Optional - number - Minimum required memory recommendedCPUs Optional - number - Recommended number of CPU cores minimumCPUs Optional - number - Minimum required number of CPU cores requiredDiskSpace Optional - number - Required amount of disk space in GB","title":"Hardware Requirements"},{"location":"attributes/model/#publishing","text":"Description Optional - string - Model tag description Additional info about model files (e.g. versioning, scope, i.e. what is the model used for, e.g. simulation, control, etc.) - Human readable marketplace description","title":"Publishing"},{"location":"attributes/supporting_metadata/","text":".md-content__button { display: none; } Supporting Metadata Fields This information is also available in table format Available Fields The metadata specification for a DIGITbrain Supporting Metadata has these sections: Person Legal Entity (Organization) IP Family IP Instance Person ID Optional - ID / URI - Unique identifier for the Person Created at Optional - ISO 8601 - Date of creation Version Optional - Integer - Version number of the Person First name Optional - Text - First name of the Person Last name Optional - Text - Last name of the Person Email Optional - Email - Email address of the Person CV Optional - Text - Short description of the Person Image Optional - Image - Profile picture of the Person Affiliation Optional - ID / URI - Legal Entity the Person is affiliated with Legal Entity (Organization) ID Optional - ID / URI - Unique identifier for the Legal Entity Created at Optional - ISO 8601 - Date of creation Version Optional - Integer - Version number of the Legal Entity Author Optional - ID / URI - Identifier of the Author of the Legal Entity Name Optional - Text - Name of the Legal Entity Description Optional - Text - Description of the Legal Entity Logo Optional - Image - Logo of the Legal Entity URL Optional - URL - Website of the Legal Entity Location Optional - ID / URI? - Physical address of the Legal Entity Phone Optional - String - Phone Number of the Legal Entity VAT ID No. Optional - String - VAT ID Number of the Legal Entity IP Family ID Optional - ID / URI - Unique identifier for the IP Fam. Created at Optional - ISO 8601 - Date of creation Version Optional - Integer - Version number of the IP Family Author Optional - ID / URI - Identifier of the Author of the IP Family Manager Optional - ID / URI - Identifier of the Legal Entity managing the IP Family Name Optional - Text - Technical Name of the IP Family Image Optional - Image - Picture of the IP Family Model No. Optional - Text - Number defined by the IP Man. Description Optional - Text - Description of the IP Family Capacity Optional - Text - Capacity of the IP Family IP Man. Optional - ID / URI - Identifier of the IP Manufacturer (Legal Entity) IP Instance ID Optional - ID / URI - Unique identifier for the IP Inst. Created at Optional - ISO 8601 - Date of creation Version Optional - Integer - Version number of the IP Instance Author Optional - ID / URI - Identifier of the Author of the IP Instance Operator Optional - ID / URI - Identifier of the Legal Entity operating the IP Instance IP Family Optional - ID / URI - Reference to the IP Family Name Optional - Text - Name of the IP Instance Image Optional - Image - Picture of the IP Instance Serial No. Optional - Text - Number defined by the IP Man. Description Optional - Text - Description of the IP Instance Location Optional - ID / URI? - Physical location of the IP Instance","title":"Supporting Metadata"},{"location":"attributes/supporting_metadata/#supporting-metadata-fields","text":"This information is also available in table format","title":"Supporting Metadata Fields"},{"location":"attributes/supporting_metadata/#available-fields","text":"The metadata specification for a DIGITbrain Supporting Metadata has these sections: Person Legal Entity (Organization) IP Family IP Instance","title":"Available Fields"},{"location":"attributes/supporting_metadata/#person","text":"ID Optional - ID / URI - Unique identifier for the Person Created at Optional - ISO 8601 - Date of creation Version Optional - Integer - Version number of the Person First name Optional - Text - First name of the Person Last name Optional - Text - Last name of the Person Email Optional - Email - Email address of the Person CV Optional - Text - Short description of the Person Image Optional - Image - Profile picture of the Person Affiliation Optional - ID / URI - Legal Entity the Person is affiliated with","title":"Person"},{"location":"attributes/supporting_metadata/#legal-entity-organization","text":"ID Optional - ID / URI - Unique identifier for the Legal Entity Created at Optional - ISO 8601 - Date of creation Version Optional - Integer - Version number of the Legal Entity Author Optional - ID / URI - Identifier of the Author of the Legal Entity Name Optional - Text - Name of the Legal Entity Description Optional - Text - Description of the Legal Entity Logo Optional - Image - Logo of the Legal Entity URL Optional - URL - Website of the Legal Entity Location Optional - ID / URI? - Physical address of the Legal Entity Phone Optional - String - Phone Number of the Legal Entity VAT ID No. Optional - String - VAT ID Number of the Legal Entity","title":"Legal Entity (Organization)"},{"location":"attributes/supporting_metadata/#ip-family_1","text":"ID Optional - ID / URI - Unique identifier for the IP Fam. Created at Optional - ISO 8601 - Date of creation Version Optional - Integer - Version number of the IP Family Author Optional - ID / URI - Identifier of the Author of the IP Family Manager Optional - ID / URI - Identifier of the Legal Entity managing the IP Family Name Optional - Text - Technical Name of the IP Family Image Optional - Image - Picture of the IP Family Model No. Optional - Text - Number defined by the IP Man. Description Optional - Text - Description of the IP Family Capacity Optional - Text - Capacity of the IP Family IP Man. Optional - ID / URI - Identifier of the IP Manufacturer (Legal Entity)","title":"IP Family"},{"location":"attributes/supporting_metadata/#ip-instance","text":"ID Optional - ID / URI - Unique identifier for the IP Inst. Created at Optional - ISO 8601 - Date of creation Version Optional - Integer - Version number of the IP Instance Author Optional - ID / URI - Identifier of the Author of the IP Instance Operator Optional - ID / URI - Identifier of the Legal Entity operating the IP Instance IP Family Optional - ID / URI - Reference to the IP Family Name Optional - Text - Name of the IP Instance Image Optional - Image - Picture of the IP Instance Serial No. Optional - Text - Number defined by the IP Man. Description Optional - Text - Description of the IP Instance Location Optional - ID / URI? - Physical location of the IP Instance","title":"IP Instance"},{"location":"tables/algorithm/","text":".md-content__button { display: none; } This information is also available in list format Concept Key Subkey Type Example Value Comment Condition Description id String algorithm_10824912410291 a unique id to identify this asset auto name String Object Detection Algorithm for detection of faulty weld seams a human-readable name to ease identification and discoverability for human users mandatory description String This algorithm can be used to solve a specifc problem, and applies some fancy technologies. a short, human-readable description of the Algorithm to aid a human user in analysing the Algorithm\u2019s capabilities and its applicability to a certain problem mandatory classificationSchema Enumeration ML the classification of the Algorithm, to describe the specialization area mandatory type List( String) {neural network, deep learning, convolutional neural network, CNN} a detailed list of attributes to describe the Algorithm\u2019s field of application mandatory author String DFKI the authoring entity mandatory date Date 06.04.2021 the creation data auto version String 1.0 the version mandatory Algorithm listOfMicroservices List( String) [microservice.microservice_id_A, microservice.microservice_id_B] a list of Microservice Asset IDs, which are contained in the algorithm mandatory deploymentMapping Map( String: String) {microservice.microservice_id_A: deployment.microservice_id_B, microservice.microservice_id_B: deployment.microservice_id_B} a mapping specifying which microservice should run on which host. By default each microservice is assigned a respective host, but this behaviour is not always ideal (eg. when two or more Microservices may need to run on the same host) mandatory","title":"Algorithm"},{"location":"tables/data/","text":".md-content__button { display: none; } This information is also available in list format Concept Key Subkey Type Example Value Comment Condition Administrative data ID id UUID Unique identifier of the data resource. auto AUTHOR id UUID Unique identifier of the user who created this record auto PROVIDER id UUID Legal entity who provides the data resource (owner). It is the affiliation of the author by default. auto DATE timestamp 10:45:13 CET 21/03/2021 Date of data resource registration. auto Description DATA_NAME string CNSPiezoBolt#1 (in directory: factory 1 , machine1 , piezobolts) Name of the data resource. (The directory hierarchy in Nexus provides a fully qualified (FQ) name, which is unique.) mandatory DATA_VERSION string 2.3.4 Version of this data resource entry (major.minor.patch). Defaults to 1.0.0 optional DATA_DESC string This sensor measures temperature in Celsius, sends data via ConSenses edge device via an MQTT broker Human readable description of the data resource. optional DATA_DESC_URL URL data-source-specification-sheet.pdf More detailed specification of data source characteristics (doc, pdf, \u2026) optional DATA_SIZE integer 112m Estimated/exact size of data (e.g. file size, volume size, or message size); might be used to assess HW requirements (RAM, CPU) . In bytes (k - kilo, m - mega, t - tera, p - peta) optional Search support DATA_TAGS list of strings [camera, rgb, w640, h480, jpg] A list of tags freely added to help in searching/indexing (not limited to a basic set of tags, keywords) optional Datakind specification DATA_KIND enum FILE , DATABASE , STREAM Type of the data resource (e.g. file/object storage, database management system, streaming broker). FILE can mean a single file or a folder. mandatory DATA_DIRECTION enum SOURCE , SINK , BIDIRECTIONAL Direction of data flow (source: data provider, sink: data consumer/storage) mandatory DATA_FORMAT list of strings [ { application/json , text/plain , application/octet-stream , application/zip } ] Format/encoding of the data produced or consumed by the data resource as a MIME type (IETF RFC 6838 https://www.sitepoint.com/mime-types-complete-list/). More than one can appear here (remote directory with several files). mandatory (xWP relation is optional) Data access specification DATA_STORE_TYPE string S3 , MYSQL , MQTT , ... (WP6: DATA_SOURCE_TYPE=LOCAL, PATH=...\") The exact type of the data resource. Typically corresponds to the scheme part (scheme://) of DATA_URI. mandatory (WP6) DATA_URI URI s3://amazonaws/bucket/object , kafka://host/topic#1 , ... Accessibility of the data resource, including host, port information, protocol, and other fields (path is protocol dependent, can be a topic name). GUI may show host, port, path separately. Hidden at search. Format: scheme://host:port/path. Pseudo vars: DATA_PROTOCOL, DATA_HOST, DATA_PORT, DATA_PATH, DATA_QUERY, DATA_FRAGMENT. mandatory (WP6 open) DATA_AUTH list of enums [ { none , userpass , accesskey_secretkey , ssl_certificate , tls_mutual, access_token , rclone_config }+ ] One or more authentication types that can be accepted by the storage resource. mandatory (xWP relation is optional) Open parameters DATA_CREDENTIALS OPEN Credentials (e.g. string/json, zip, config file) open Further access clauses (extensible) DATA_PROTOCOL string HTTP, HTTPS, TCP, UDP Protocol to use in communication with the data source, only if DATA_TYPE does not imply it (e.g. S3 over HTTP). Moved from to Data access specification. Note this is not necessarily the scheme part of the URI. optional DATA_MYSQL_DIALECT string mysqldialect , mariadbdialect Protocol dialect to be used in communication with the database optional DATA_MQTT_PROTOCOL_VERSION string 3.1.1, 5.0 MQTT protocol version must be used optional DATA_KAFKA_BROKER_VERSION string 2.7.0 Kafka broker version optional DATA_S3_REGION string eu-central-1 S3 region optional Data content semantics DATA_SCHEMA string database schema description/contents Describes message internal structure, semantics, ontology. It can be any file (doc, rdf, owl, etc.). Asset Administration Shell, IEC 61360 - Common Data Dictionary, ... optional DATA_SCHEMA_URL URL database schema URL optional DATA_SCHEMA_ADDITIONAL_ATTRIBUTES string Further restriction/specialization of DATA_SCHEMA, \u201cgeneral\u201d schema. optional","title":"Data"},{"location":"tables/dataassetsmapping/","text":".md-content__button { display: none; } This information is also available in list format Concept Key Subkey Type Example Value Comment Condition This substructure is part of DMA Tuple DataAssetsMapping MICROSERVICE_ID Map \"microservice_0db_uuid\": The key(s) in this substructure are UUID string(s) corresponding to the ID(s) of the Microservice(s)making up the included Algorithm. The value for this key is a mapping of Data Sources to Data Assets. mandatory DATA_SOURCE_ID UUID See above Nested below each Microservice, these key(s) are the String identifier(s) of the Data Source(s) of each Microservice. The value for each key is the UUID of the Data Asset that corresponds to it. mandatory","title":"Data Assets Mapping"},{"location":"tables/deployment/","text":".md-content__button { display: none; } This information is also available in list format Concept Key Subkey Type Example Value Comment Condition This substructure is part of DMA Tuple Description id UUID DIGITbrain reference auto name String Short name for the node/device mandatory author String Created by mandatory date Date Created on auto Deployments type Enumeration computing centre mandatory cloudbroker Map of\u2026 Configuration data for a CloudBroker instance deployment_id UUID ID of CloudBroker Deployment instance_type_id UUID ID of CloudBroker InstanceType key_pair_id UUID ID of CloudBroker Key Pair opened_port String (comma separated integers) Ports to open at cloud side endpoint URL Endpoint of the CB Platform cloud_config String #cloud-config\\nruncmd:\\n- [ sh, -xc, \\\"echo 'hello world!'\\\" ] cloud-init configuration for contextualisation of the VM edge Map of\u2026 Connection data for a bring-your-own edge endpoint URL accesible IP or FQDN of edge device","title":"Deployment"},{"location":"tables/dma_tuple/","text":".md-content__button { display: none; } This information is also available in list format Concept Key Subkey Type Example Value Comment Condition Definition ID ID / URI 123e4567-e89b-12d3-a456-426614174000 Unique identifier for the DMA Tuple auto Created at ISO 8601 2021-05-01T00:00:00Z Date of creation auto Version Integer 21 Version number of the DMA Tuple Author ID / URI person_123e4567-e89b-12d3 (auto) Identifier of the Author of the MA Pair (NB: Entity for author is referenced) auto Licensor ID / URI legal_entity_123e4567-e89b-12d3 (auto) Identifier of the Legal Entity licensing the the MA Pair (NB: Entity for Licensor is referenced) auto Derivation IDs / URIs dma_tuple_123e4567-e89b-12d3 (auto) In case of derivation, references to parent / child (optional) auto Name Text Pressure drop for the injection in hall 3 Short name to identify the DMA Tuple Scope Text Effectiveness of the mold closing process Short description of the scope of the DMA Tuple (human readable) IP Instance ID / URI ip_instance_123e4567-e89b-12d3 Identifier of the IP Instance the DMA Tuple is valid for (NB: Entity for IP Instance is referenced) Namespace ID / URI? namespace_123e4567-e89b-12d3 Context to interpret the associated information (optional?) MA Pair ID / URI ma_pair_123e4567-e89b-12d3 Identifier of the MA Pair associated to the DMA Tuple DataAssetsMapping DataAssetsMapping Mapping the available Data assets in this DMA Tuple to available Microservices. Required if Data assets are required. Not all microservices need a Data asset. Deployments Deployment Characteristics of the Deployment (i.e. Cloud or Edge infrastructure) for every Microservice associated to the DMA Tuple Schedule Dates R90/2021-05-01T00:00:00Z/PT48H Days and hours the DMA Tuple will be active (optional) Payload String {\u2018injectionMold\u2019: \u2018Circuit Case\u2019} User-defined key-value pairs: JSON string with additional information (optional)","title":"DMA Tuple"},{"location":"tables/ma_pair/","text":".md-content__button { display: none; } This information is also available in list format Concept Key Subkey Type Example Value Comment Condition Definition ID UUID 123e4567-e89b-12d3-a456-426614174000 Unique identifier for the MA Pair auto Created at ISO 8601 2021-05-01T00:00:00Z Date of creation auto Version Integer 21 Version number of the MA Pair Author UUID person_123e4567-e89b-12d3 (auto) Identifier of the Author of the MA Pair (NB: Entity for author is referenced) auto Licensor UUID legal_entity_123e4567-e89b-12d3 (auto) Identifier of the Legal Entity licensing the MA Pair (NB: Entity for Licensor is referenced) auto Derivation UUID ma_pair_123e4567-e89b-12d3 (auto) In case of derivation, references to parent / child (optional) auto Name Text Pressure drop Short name to identify the MA Pair Scope Text Effectiveness of the mold closing process Short description of the scope of the MA Pair (human readable) IP Family UUID ip_family_123e4567-e89b-12d3 Identifier of the IP Family the MA Pair is valid for Namespace UUID? namespace_123e4567-e89b-12d3 Context to interpret the associated information (optional?) M Asset UUID model_123e4567-e89b-12d3 Identifier of the Model Asset associated to the MA Pair (NB: The corresponding model file is indicated in Model metadata (first tab) as Model_URI and the corresponding zip file needs to be served to the Algorithm to evaluate the Model by the Microservice (MODEL_FILENAME)) A Asset UUID algorithm_123e4567-e89b-12d3 Identifiers of the Algorithm Asset associated to the MA Pair Rules UUIDs rules_123e4567-e89b-12d3 References to recommended Rules to be verified per Evaluation of the MA Pair Frequency Integer 12 Recommended number of evaluations conducted per hour for the MA Pair (optional) Payload String {\u2018minPressure\u2019: 90, \u2018maxPressure\u2019: 120} User-defined key-value pairs: JSON string with additional information (optional)","title":"MA Pair"},{"location":"tables/microservice/","text":".md-content__button { display: none; } This information is also available in list format Concept Key Subkey Type Example Value Comment Condition Description id String microservice_12312124 unique DIGITbrain reference auto name String Object Detection for faulty parts human readable short, yet descriptive name of the Microservice mandatory author String DFKI name of the authoring entity mandatory date Date 06.04.2021 creation date auto version String 1.0 version mandatory description String This microservices solves a certain problem using very specific methods... human readable short description of the Microservice's capabilities mandatory classificationSchema Enumeration other fine-granular classification of the Microservice mandatory type List( String) {neural network, deep learning, convolutional neural network, CNN} detailed type of the microservice, list of keywords mandatory Service deploymentFormat Enumeration docker-compose identifier of the deployment environment required to deploy the Microservice's container mandatory deploymentData JSON See https://github.com/UoW-CPC/ADTGenerator/blob/main/examples/metadata_microservice.json#L30 JSON of docker-compose or kubernetes manifest required to run the container mandatory configurationData List(Map) https://github.com/UoW-CPC/ADTGenerator/blob/main/examples/metadata_RISTRA.json#L101 configuration file(s) required by the service optional filePath String /data/rclone.conf full path to file including file name required fileContent String [s3-server]\\n access_key: 123abc file content (not binary) required mountPropagation boolean True Enable mountPropagation https://kubernetes.io/docs/concepts/storage/volumes/#mount-propagation . Default: False optional mountedInputDirectories List(String) [\"/data\", \"/cfg\"] A note for developers of co-operating Microservices. A list of directories that should be shared to the host by where this microservice can find required inputs optional mountedOutputDirectories List(String) [\"/data_out\", \"/results\"] A note for developers of co-operating Microservices. A list of directories that are shared on the host where this microservice will store its outputs optional Hardware Requirements recommendedNumberOfGPUs Int 2 recommended number of GPUs optional minimumNumberOfGPUs Int 1 minimum required number of GPUs optional recommendedGPURAM Int 6 recommended amount of GPU memory in GB optional minimumGPURAM Int 1 minimum required amount of GPU memory in GB optional gpuType String NVidia (compute capability >= 7.0) a description of the type of GPUs, and further specifications, to allow the execution of the Microservice optional hpcRequired Bool true whether this Microservice requires an HPC environment to be executed efficiently optional edgeType Enumeration NVIDIA Jetson AGX required type of edge device to allow the execution of the Microservice optional recommendedRAM String 16 recommended amount of memory in GB optional minimumRAM String 2 minimum required amount memory in GB optional recommendedCPUs Int 4 recommended number of CPU cores optional minimumCPUs Int 2 minimum required number of CPU cores optional requiredDiskSpace Int 42 required amount of disk space in GB optional OS Requirements osArch String x86_64 supported os architecture mandatory osType String linux supported os type optional osDistribution String ubuntu supported os distribution optional osVersion String 20.04 description of supported os version optional Input Data(WP4) inputData List( Data Objects) {{DATA_KIND = {FILE, STREAM}, DATA_DIRECTION = {SOURCE}} list of Data objects for each required input, specified using the \"DATA\" fields listed below optional Data Object Fields input_id String file1 human-readable identifier, unique within a Microservice mandatory DATA_KIND List( DATA_KIND) {FILE, STREAM} supported types of the data resource (e.g. file/object storage, database management system, streaming broker). FILE can mean a single file or a folder. mandatory DATA_DIRECTION List( DATA_DIRECTION) {SINK, BIDIRECTIONAL} supported direction of data flow (source: data provider, sink: data consumer/storage) mandatory DATA_FORMAT List( DATA_FORMAT) {application/zip, image/jpg} supported format/encoding of the data produced or consumed by the data resource as a MIME type (IETF RFC 6838 https://www.sitepoint.com/mime-types-complete-list/). More than one can appear here (remote directory with several files). optional DATA_SOURCE_TYPE List( DATA_SOURCE_TYPE) {MYSQL, KAFKA} supported exact type of the data resource. Typically corresponds to the scheme part (protocol://) of DATA_URI optional DATA_PROTOCOL List( DATA_PROTOCOL) {HTTP} supported protocols optional DATA_AUTH_TYPE List( DATA_AUTH_TYPE) {tls_mutual, userpass} supported authentication type optional DATA_MYSQL_DIALECT List( DATA_MYSQL_DIALECT) {mariadbdialect} supported MYSQL dialect optional DATA_MQTT_PROTOCOL_VERSION List( DATA_MQTT_PROTOCOL_VERSION) {2.3.1} supported MQTT protocol version optional DATA_KAFKA_BROKER_VERSION List( DATA_KAFKA_BROKER_VERSION) {2.7.1, 2.5} supported Kafka broker version optional DATA_S3_REGION List( DATA_S3_REGION) {eu-central-1} supported S3 region optional DATA_SCHEMA List( DATA_SCHEMA) {jpg} supported internal message structure, semantics, ontology. It can be any file (doc, rdf, owl, etc.). Asset Administration Shell, IEC 61360 - Common Data Dictionary, \u2026 optional Output Data (WP4) outputData List( Data Objects) {{DATA_KIND = {FILE, STREAM}, DATA_DIRECTION = {SINK}} list of Data objects for each generated output, specified using the \"DATA\" fields listed below optional Data Object Fields output_id String file1 human-readable identifier, unique within a Microservice mandatory DATA_KIND List( DATA_KIND) {FILE, STREAM} supported types of the data resource (e.g. file/object storage, database management system, streaming broker). FILE can mean a single file or a folder. mandatory DATA_DIRECTION List( DATA_DIRECTION) {SINK, BIDIRECTIONAL} supported direction of data flow (source: data provider, sink: data consumer/storage) mandatory DATA_FORMAT List( DATA_FORMAT) {application/zip, image/jpg} supported format/encoding of the data produced or consumed by the data resource as a MIME type (IETF RFC 6838 https://www.sitepoint.com/mime-types-complete-list/). More than one can appear here (remote directory with several files) optional DATA_SOURCE_TYPE List( DATA_SOURCE_TYPE) {MYSQL, KAFKA} supported exact type of the data resource. Typically corresponds to the scheme part (protocol://) of DATA_URI. optional DATA_PROTOCOL List( DATA_PROTOCOL) {HTTP} supported protocols optional DATA_AUTH_TYPE List( DATA_AUTH_TYPE) {tls_mutual, userpass} supported authentication type optional DATA_MYSQL_DIALECT List( DATA_MYSQL_DIALECT) {mariadbdialect} supported MYSQL dialect, for each generated output optional DATA_MQTT_PROTOCOL_VERSION List( DATA_MQTT_PROTOCOL_VERSION) {2.3.1} supported MQTT protocol version optional DATA_KAFKA_BROKER_VERSION List( DATA_KAFKA_BROKER_VERSION) {2.7.1, 2.5} supported Kafka broker version optional DATA_S3_REGION List( DATA_S3_REGION) {eu-central-1} supported S3 region optional DATA_SCHEMA List( DATA_SCHEMA) {jpg} supported internal message structure, semantics, ontology. It can be any file (doc, rdf, owl, etc.). Asset Administration Shell, IEC 61360 - Common Data Dictionary, \u2026 optional Model(WP5) model_types List( ModelTypes) {SavedModel (Tensorflow)} list of supported Model types optional model_recommendedAuthTools List (AuthTools) {PreSTRA} list of recommended AuthoringTools used to generate the Model optional Parameters parameters List( Parameter) list of Parameter objects for each possible parameters, to be specified before deployment optional Parameter Fields name String detection_threshold short name for this parameter (should be unique across the Microservice\u2019s parameters) mandatory type Enumeration (xsd datatypes) Integer expected input type (may be used to verify the input) mandatory mandatory Boolean true whether this parameter is mandatory (default: false) optional defaultValue has to match \"type\" 42 a default value, if the parameter is required but not provided optional description String This parameter can be used to configure the included algorithm in a certain way, possible values: \"A\", \"B\", \"Z\" short description of the parameter and its possible values mandatory Metrics metrics List( Metrics) list of Metric objects for each metric collected by the Microservice optional Metric Fields name String meanTemperature short name (should be unique across the Microservice's metrics) mandatory correspondingMeasurement String temperature1 identification of the corresponding measurement, i.e. output of the Model mandatory function String arithmetic mean short description of the mathematical approach used to derive this value mandatory unit String degree celsius the unit of the metric measurement mandatory description String This metric describes the arithmetic mean of the approximated temperatures of the fabricated part when it leaves station 4. short description of the metric measurement mandatory","title":"Microservice"},{"location":"tables/model/","text":".md-content__button { display: none; } This information is also available in list format Concept Key Subkey Type Example Value Comment Condition Description ID UUID Internal DigitBrain reference (automatically generated) auto Name string Name of the model Version semver Version of the model. If model only has revisions, use semver prerelease 0.1, 0.2, etc. License enum License of the model. Type tbd in SAD group Provider string Provider name: Institution or Person Provider_contacts obj Dictionary with keys being phone, email, address - Type takes into account co-simulation models, for which solver info is mandatory (next slide) optional AuthTool enum Authoring Tool used to create the model Type enum ML, LCA, 3D FEM and CFD, System simulation, discrete event simulation, co-simulation (it couples a model with specific algorithms) - The original term Path was proposed to be changed (SAD) Fidelity number Error of the model\u2019s prediction optional REPOSITORY_URI URI https://www.myrepo.com Where the model file is stored (usually the DigitBrain certified external model repository). The path and model filename are not provided via this field. mandatory PATH string input/models Path to the model file in the specified repository, not including the filename itself. mandatory FILENAME string mymodel.pb Name of the model file at the given path within the given repo, with a file extension if it exists. mandatory State_depend bool stateful -> 1, stateless -> 0 Parameters In-slots array of obj Values on which the model is evaluated (or parameters that might set before or during the evaluation) - Inputs and parameters together, although if needed we can still differentiate them internally in key field for each specific model. Key string Group key (eg. type and name) of the in-slot Name string Human-readable name of the in-slot Dimensions number Number of dimensions of the in-slot (i.e. scalar, vector field) Is-continuous boolean continuous or discreet in-slot Units obj (see subkeys below) Values related to the in-slot measurement units Units.Unit string Units of the in-slot (e.g Pa, m/s, etc\u2026) Units.Exponent array of number eg. exponents for kg (SI) Units.Offset number scale offset if needed (e.g. K to C conversion) Units.Scale number Order of magnitude of the measurement unit scale e.g. Scale is equal to 10^-3 for values expressed in mm Default-value number Default value for the in-slot Ranges array of number Max and min value of the in-slot Outputs array of obj Values that the model approximates Key string Group key (eg. type and name) of the output Name string Human-readable name of the output Dimensions number Number of dimensions of the output (i.e. scalar, vector field) Is-continuous boolean Continuous or discreet output Units obj (see subkeys below) Values related to the output measurement units Units.Unit string Units of the output (e.g Pa, m/s, etc\u2026) Units.Exponent array of number eg. exponents for kg (SI) Units.Offset number scale offset if needed (e.g. K to C conversion) Units.Scale number Order of magnitude of the measurement unit scale e.g. Scale is equal to 10^-3 for values expressed in mm Default-value number Default value for the output Ranges array of number Max and min value of the output CosimSolverInfo obj For co-simulation Type only optional Dependant FMUs Dependencies array of URI Dependant FMUs for co-simulation optional OS Requirements osArch enum OS architecture type (e.g. x86_64) optional osType enum OS type (e.g. Windows, Linux) optional osDistribution enum OS distributun (e.g. Ubuntu, Fedora) optional Hardware Requirements recommendedNumberOfGPUCores number Recommended number of GPU cores optional minimumNumberOfGPUCores number Minimum required number of GPU cores optional recommendedGPURAM number Recommended GPU memory optional minimumGPURAM number Minimum required GPU memory optional recommendedRAM number Recommended Memory optional minimumRAM number Minimum required memory optional recommendedCPUs number Recommended number of CPU cores optional minimumCPUs number Minimum required number of CPU cores optional requiredDiskSpace number Required amount of disk space in GB optional Publishing Description string Model tag description Additional info about model files (e.g. versioning, scope, i.e. what is the model used for, e.g. simulation, control, etc.) - Human readable marketplace description","title":"Model"},{"location":"tables/supporting_metadata/","text":".md-content__button { display: none; } This information is also available in list format Concept Key Subkey Type Example Value Comment Condition Person ID ID / URI Unique identifier for the Person Created at ISO 8601 Date of creation Version Integer Version number of the Person First name Text First name of the Person Last name Text Last name of the Person Email Email Email address of the Person CV Text Short description of the Person Image Image Profile picture of the Person Affiliation ID / URI Legal Entity the Person is affiliated with Legal Entity (Organization) ID ID / URI Unique identifier for the Legal Entity Created at ISO 8601 Date of creation Version Integer Version number of the Legal Entity Author ID / URI Identifier of the Author of the Legal Entity Name Text Name of the Legal Entity Description Text Description of the Legal Entity Logo Image Logo of the Legal Entity URL URL Website of the Legal Entity Location ID / URI? Physical address of the Legal Entity Phone String Phone Number of the Legal Entity VAT ID No. String VAT ID Number of the Legal Entity IP Family ID ID / URI Unique identifier for the IP Fam. Created at ISO 8601 Date of creation Version Integer Version number of the IP Family Author ID / URI Identifier of the Author of the IP Family Manager ID / URI Identifier of the Legal Entity managing the IP Family Name Text Technical Name of the IP Family Image Image Picture of the IP Family Model No. Text Number defined by the IP Man. Description Text Description of the IP Family Capacity Text Capacity of the IP Family IP Man. ID / URI Identifier of the IP Manufacturer (Legal Entity) IP Instance ID ID / URI Unique identifier for the IP Inst. Created at ISO 8601 Date of creation Version Integer Version number of the IP Instance Author ID / URI Identifier of the Author of the IP Instance Operator ID / URI Identifier of the Legal Entity operating the IP Instance IP Family ID / URI Reference to the IP Family Name Text Name of the IP Instance Image Image Picture of the IP Instance Serial No. Text Number defined by the IP Man. Description Text Description of the IP Instance Location ID / URI? Physical location of the IP Instance","title":"Supporting Metadata"}]}